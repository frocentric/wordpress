{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","models/partModel.js","models/partCollection.js","controllers/data.js","controllers/clickControls.js","controllers/gutterDroppables.js","controllers/partSettings.js","controllers/partDroppable.js","controllers/partSortable.js","controllers/undo.js","controllers/loadControllers.js","views/drawerItem.js","views/drawerCollection.js","views/drawerLayout.js","views/layout.js","views/gutterLeft.js","views/gutterRight.js","views/mainContentEmpty.js","controllers/filters.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Backbone","Model","extend","defaults","formContentData","order","type","clean","title","initialize","this","on","unclean","filterFormContentData","listenTo","get","sortFormContentData","fieldCollection","nfRadio","channel","request","triggerRemove","set","Math","random","toString","substr","Number","sort","fieldModel","_","isArray","trigger","formContentLoadFilters","sortedArray","without","empty","cells","partFields","pluck","each","cell","fields","flatten","union","PartModel","Collection","model","currentElement","comparator","models","options","afterRemove","afterAdd","maybeChangeBuilderClass","collection","changeCurrentPart","setElement","count","changeBuilderClass","hasParts","builderEl","addClass","removeClass","getElement","at","silent","previousElement","currentDrawer","settingGroupCollection","groupCollection","next","hasNext","previous","hasPrevious","getFormContentData","updateOrder","append","max","add","PartCollection","Marionette","layoutsEnabed","reply","initPartCollection","getCollection","action","addField","partCollection","clickPrevious","clickNext","clickNew","clickPart","clickRemove","clickDuplicate","label","object","change","dashicon","data","partModel","settingModel","settingView","trash","removeFields","forEach","remove","that","partClone","duplicatedFields","currentDomain","currentDomainID","row","rowIndex","cellIndex","field","fieldIndex","newField","tmpID","ii","over","out","dropRight","dropLeft","ui","find","item","draggable","drop","dir","dropping","hasClass","oldOrder","previousPart","oldPart","newPart","stagedFields","nextPart","keys","fieldType","changePart","helper","SettingGroupCollection","setupCollection","display","priority","settings","width","partView","css","height","opacity","sortableEl","fieldWidth","effect","to","el","dropField","dropNewField","dropStaging","start","stop","update","collectionView","show","findWhere","key","sortable","undoAddPart","undoRemovePart","undoDupilcatePart","undoFieldChangePart","undoSortParts","undoAll","changeCollection","filter","maybeRemoveChange","Data","ClickControls","GutterDroppables","PartSettings","PartDroppable","PartSortable","Undo","ItemView","tagName","template","updatedTitle","maybeChangeActive","render","setULWidth","attributes","onShow","droppable","activeClass","hoverClass","accept","tolerance","events","click","templateHelpers","getIndex","DrawerItemView","CollectionView","childView","reorderOnSort","drawerLayoutView","window","context","resizeEvent","maybeScroll","li","children","marginLeft","parseInt","viewportWidth","viewport","diff","offset","left","outerWidth","animate","scrollLeft","showHidePagination","childViewOptions","items","onAttach","ulWidth","onRemoveChild","onAddChild","onBeforeAddChild","parent","is","hide","DrawerCollectionView","LayoutView","regions","resizeWindow","beforeDrawerOpen","beforeDrawerClose","onBeforeDestroy","off","resizeViewport","viewportEl","drawerEl","targetWidth","currentView","DrawerLayoutView","mainContent","drawer","formContentViewFilters","formContentView","click .nf-mp-drawer-scroll-previous","click .nf-mp-drawer-scroll-next","lis","viewportTotal","widthCounter","hideDir","showDir","direction","closest","scrollTop","click .fa","onRender","click .next","click .new","console","log","hasContent","$el","unwrap","GutterLeftView","GutterRightView","MainContentEmptyView","addFilters","getLeftView","getRightView","getContentView","formContentSave","formContentLoad","conditionsFilter","conditionTriggers","emptyView","isEmpty","first","newCollection","formContentSaveFilters","clone","toJSON","defaultMainContentEmptyView","getMainContentEmpty","groups","modelType","partOptions","unshift","defaultTriggers","show_field","hide_field","maybeAddElse","thenModel","opposite","target","val","conditionModel","Radio","LoadControllers","LoadFilters","Application","loadControllers","onStart"],"mappings":"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","file":"builder.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../lib/almond\", function(){});\n\n","/**\n * Model that represents part information.\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/partModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tformContentData: [],\n\t\t\torder: 0,\n\t\t\ttype: 'part',\n\t\t\tclean: true,\n\t\t\ttitle: 'Part Title'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * TODO: For some reason, each part model is being initialized when you add a new part.\n\t\t\t */\n\t\t\tthis.on( 'change:title', this.unclean );\n\t\t\tthis.filterFormContentData();\n\t\t\tthis.listenTo( this.get( 'formContentData' ), 'change:order', this.sortFormContentData );\n\t\t\t/*\n\t\t\t * When we remove a field from our field collection, remove it from this part if it exists there.\n\t\t\t */\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tthis.listenTo( fieldCollection, 'remove', this.triggerRemove );\n\n\t\t\t/*\n\t\t\t * Set a key for part.\n\t\t\t */\n\t\t\tif ( ! this.get( 'key' ) ) {\n\t\t\t\tthis.set( 'key', Math.random().toString( 36 ).replace( /[^a-z]+/g, '' ).substr( 0, 8 ) );\n\t\t\t}\n            // Cast order as a number to avoid string comparison.\n            this.set( 'order', Number( this.get( 'order' ) ) );\n\t\t},\n\n\t\tunclean: function() {\n\t\t\tthis.set( 'clean', false );\n\t\t},\n\n\t\tsortFormContentData: function() {\n\t\t\tthis.get( 'formContentData' ).sort();\n\t\t},\n\n\t\ttriggerRemove: function( fieldModel ) {\n\t\t\tif ( _.isArray( this.get( 'formContentData' ) ) ) {\n\t\t\t\tthis.filterFormContentData();\n\t\t\t}\n\t\t\tthis.get( 'formContentData' ).trigger( 'remove:field', fieldModel );\n\t\t},\n\n\t\tfilterFormContentData: function() {\n\t\t\tif ( ! this.get( 'formContentData' ) ) return;\n\n\t\t\tvar formContentData = this.get( 'formContentData' );\n\t\t\t/*\n\t\t\t * Update our formContentData by running it through our fromContentData filter\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t/* \n\t\t\t* Get our second filter, this will be the one with the highest priority after MP Forms.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\tvar callback = sortedArray[ 1 ];\n\t\t\t/*\n\t\t\t * If our formContentData is an empty array, we want to pass the \"empty\" flag as true so that filters know it's purposefully empty.\n\t\t\t */\n\t\t\tvar empty = ( 0 == formContentData.length ) ? true : false;\n\t\t\t/*\n\t\t\t * TODO: This is a bandaid fix to prevent forms with layouts and parts from freaking out of layouts & styles are deactivated.\n\t\t\t * If Layouts is deactivated, it will try to grab the layout data and show the fields on the appropriate parts.\n\t\t\t */\n\t\t\tif ( 'undefined' == typeof formContentLoadFilters[4] && _.isArray( formContentData ) && 0 != formContentData.length && 'undefined' != typeof formContentData[0].cells ) {\n\t\t\t\t/*\n\t\t\t\t * We need to get our field keys from our layout data.\n\t\t\t\t * Layout data looks like:\n\t\t\t\t * Rows\n\t\t\t\t *   Row\n\t\t\t\t *     Cells\n\t\t\t\t *       Cell\n\t\t\t\t *         Fields\n\t\t\t\t *       Cell\n\t\t\t\t *         Fields\n\t\t\t\t *   Row\n\t\t\t\t *     Cells\n\t\t\t\t *       Cell\n\t\t\t\t *         Fields  \n\t\t\t\t */\n\t\t\t\tvar partFields = [];\n\t\t\t\tvar cells = _.pluck( formContentData, 'cells' );\n\t\t\t\t_.each( cells, function( cell ) {\n\t\t\t\t\tvar fields = _.flatten( _.pluck( cell, 'fields' ) );\n\t\t\t\t\tpartFields = _.union( partFields, fields );\n\t\t\t\t} );\n\n\t\t\t\tformContentData = partFields;\n\n\t\t\t\tthis.set( 'formContentData', formContentData );\n\t\t\t}\n\n\t\t\tthis.set( 'formContentData', callback( formContentData, empty, formContentData ) );\n\t\t}\n\n\t} );\n\n\treturn model;\n} );\n\n","define( 'models/partCollection',[ 'models/partModel' ], function( PartModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: PartModel,\n\t\tcurrentElement: false,\n\t\tcomparator: 'order',\n\n\t\tinitialize: function( models, options ){\n\t\t\tmodels = models || [];\n\n\t\t\tthis.on( 'remove', this.afterRemove );\n\t\t\tthis.on( 'add', this.afterAdd );\n\t\t\tthis.maybeChangeBuilderClass( models.length );\n\t\t},\n\n\t\tafterRemove: function( model, collection, options ) {\n\t\t\tthis.changeCurrentPart( model, collection, options );\n\t\t\tthis.maybeChangeBuilderClass( model, collection, options );\n\t\t\t/*\n\t\t\t * If our drawer is open, close it.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t},\n\n\t\tafterAdd: function( model ) {\n\t\t\tthis.setElement( model );\n\t\t\tthis.maybeChangeBuilderClass( model );\n\t\t},\n\n\t\t\n\t\tmaybeChangeBuilderClass: function( count, collection, options ) {\n\t\t\tif ( true === count instanceof Backbone.Model ) {\n\t\t\t\tcount = this.length;\n\t\t\t}\n\n\t\t\tthis.changeBuilderClass( 1 < count );\n\t\t},\n\n\t\tchangeBuilderClass: function( hasParts ) {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tif ( hasParts ) {\n\t\t\t\tjQuery( builderEl ).addClass( 'nf-has-parts' );\n\t\t\t} else {\n\t\t\t\tjQuery( builderEl ).removeClass( 'nf-has-parts' );\n\t\t\t}\n\t\t},\n\n\t\tchangeCurrentPart: function( model, collection, options ) {\n\t\t\t/*\n\t\t\t * When we remove the current part, change the current part in our collection.\n\t\t\t *\n\t\t\t * TODO: Find a way to pass index to has previous or has next for proper testing.\n\t\t\t * Since the model has been removed, it will always return a -1.\n\t\t\t */\n\t\t\tif ( this.getElement() == model ) {\n\t\t\t\tif ( 0 == options.index ) {\n\t\t\t\t\tthis.setElement( this.at( 0 ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis.setElement( this.at( options.index - 1 ) );\n\t\t\t\t}\n\t\t\t} else if ( 1 == this.length ) {\n\t\t\t\tthis.setElement( this.at( 0 ) );\n\t\t\t}\n\t\t},\n\n\t\tgetElement: function() {\n\t\t\t/*\n\t\t\t * If we haven't set an element yet, set it to the first one.\n\t\t\t */\n\t\t\tif ( ! this.currentElement ) {\n\t\t\t\tthis.setElement( this.at( 0 ), true );\n\t\t\t}\n\t\t\treturn this.currentElement;\n\t\t},\n\t\t  \n\t\tsetElement: function( model, silent ) {\n\t\t\tif ( model == this.currentElement ) return;\n\t\t\tsilent = silent || false;\n\t\t\tthis.previousElement = this.currentElement;\n\t\t\tthis.currentElement = model;\n\t\t\tif ( ! silent ) {\n\t\t\t\t/*\n\t\t\t\t * If we are editing a part and we change parts, update the data being displayed in the drawer to match the new part.\n\t\t\t\t */\n\t\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n\t\t\t\tif ( currentDrawer && 'editSettings' == currentDrawer.get( 'id' ) ) {\n\t\t\t\t\tvar settingGroupCollection = nfRadio.channel( 'mp' ).request( 'get:settingGroupCollection' );\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: settingGroupCollection } );\n\t\t\t\t}\n\n\t\t\t\tthis.trigger( 'change:part', this );\n\t\t\t}\n\t\t},\n\t\t\n\t\tnext: function (){\n\t\t\t/*\n\t\t\t * If this isn't the last part, move forward.\n\t\t\t */\n\t\t\tif ( this.hasNext() ) {\n\t\t\t\tthis.setElement( this.at( this.indexOf( this.getElement() ) + 1 ) );\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\n\t\tprevious: function() {\n\t\t\t/*\n\t\t\t * If this isn't the first part, move backward.\n\t\t\t */\n\t\t\tif ( this.hasPrevious() ) {\n\t\t\t\tthis.setElement( this.at( this.indexOf( this.getElement() ) - 1 ) );\t\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\n\t\thasNext: function() {\n\t\t\tif ( 0 == this.length ) return false;\n\t\t\treturn this.length - 1 != this.indexOf( this.getElement() );\n\t\t},\n\n\t\thasPrevious: function() {\n\t\t\tif ( 0 == this.length ) return false;\n\t\t\treturn 0 != this.indexOf( this.getElement() );\n\t\t},\n\n\t\tgetFormContentData: function() {\n\t\t\treturn this.getElement().get( 'formContentData' );\n\t\t},\n\n\t\tupdateOrder: function() {\n\t\t\tthis.each( function( model, index ) {\n\t\t\t\tmodel.set( 'order', index );\n\t\t\t} );\n\t\t\tthis.sort();\n\t\t},\n\n\t\tappend: function( model ) {\n\t\t    var order = _.max( this.pluck( 'order' ) ) + 1;\n\t\t    if( model instanceof Backbone.Model ) {\n\t\t        model.set( 'order', order );\n\t\t    } else {\n\t\t        model.order = order;\n\t\t    }\n\t\t    return this.add( model );\n\t\t}\n\t} );\n\n\treturn collection;\n} );\n","/**\n * Holds our part collection.\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/data',[ 'models/partCollection' ], function ( PartCollection) {\n\tvar controller = Marionette.Object.extend( {\n\t\tlayoutsEnabed: false,\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Instantiate our part collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'mp' ).reply( 'init:partCollection', this.initPartCollection, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests for our part collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'mp' ).reply( 'get:collection', this.getCollection, this );\n\n\t\t\t/*\n\t\t\t * If we don't have Layout & Styles active, when we add a field to our field collection, collection, trigger an \"add:model\"\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\n\t\t\t/*\n\t\t\t * Layout & Styles compatibility\n\t\t\t * TODO: Super Hacky Bandaid fix for making sure we don't trigger an duplicating a field if Layouts is enabled.\n\t\t\t * If it is enabled, Layouts handles adding duplicated items.\n\t\t\t */\n\t\t\tthis.layoutsEnabed = ( 'undefined' != typeof formContentLoadFilters[4] ) ? true : false;\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'render:newField', function( fieldModel, action ){\n                action = action || '';\n                if ( this.layoutsEnabed && 'duplicate' == action ) return false;\n\t\t\t\tthis.addField( fieldModel, action );\n\t\t\t}, this );\n\t\t\t/* END Layout & Styles compatibility */\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'render:duplicateField', this.addField );\n\t\t},\n\n\t\tinitPartCollection: function( partCollection ) {\n\t\t\tthis.collection = partCollection;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\taddField: function( fieldModel, action ) {\n\t\t\tif ( this.layoutsEnabed && 'duplicate' == action ) return false;\n\t\t\tthis.collection.getFormContentData().trigger( 'add:field', fieldModel );\n\t\t\tif( 1 == this.collection.getFormContentData().length ) {\n\t\t\t\tthis.collection.getFormContentData().trigger( 'reset' );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listen for clicks on our previous and next buttons\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine(\t'controllers/clickControls',[],\tfunction () {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'click:previous', this.clickPrevious );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'click:next', this.clickNext );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'click:new', this.clickNew );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'click:part', this.clickPart );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-name-mp_remove' ), 'click:extra', this.clickRemove );\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-name-mp_duplicate' ), 'click:extra', this.clickDuplicate );\n\n\t\t},\n\n\t\tclickPrevious: function( e ) {\n\t\t\tvar collection = nfRadio.channel( 'mp' ).request( 'get:collection' );\n\t\t\tcollection.previous();\n\t\t},\n\n\t\tclickNext: function( e ) {\n\t\t\tvar collection = nfRadio.channel( 'mp' ).request( 'get:collection' );\n\t\t\tcollection.next();\n\t\t},\n\n\t\tclickNew: function( e ) {\n\t\t\tvar collection = nfRadio.channel( 'mp' ).request( 'get:collection' );\n\t\t\tvar model = collection.append({});\n\t\t\t\n\t\t\t/*\n\t\t\t * Register our new part to the change manager.\n\t\t\t */\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t// Update our preview\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Part',\n\t\t\t\tlabel: model.get( 'title' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: model.collection\n\t\t\t};\n\n\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'addPart', model, null, label, data );\n\t\t},\n\n\t\tclickPart: function( e, partModel ) {\n\t\t\tif ( partModel == partModel.collection.getElement( partModel ) ) {\n\t\t\t\t/*\n\t\t\t\t * If we are on the active part, open the drawer for that part.\n\t\t\t\t */\n\t\t\t\tvar settingGroupCollection = nfRadio.channel( 'mp' ).request( 'get:settingGroupCollection' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: partModel, groupCollection: settingGroupCollection } );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * If we aren't on the active part, move to it.\n\t\t\t\t */\n\t\t\t\tpartModel.collection.setElement( partModel );\n\t\t\t}\n\t\t},\n\n\t\tclickRemove: function( e, settingModel, partModel, settingView ) {\n\t\t\t/*\n\t\t\t * Register our change.\n\t\t\t */\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t// Update our preview\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Part',\n\t\t\t\tlabel: partModel.get( 'title' ),\n\t\t\t\tchange: 'Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: partModel.collection\n\t\t\t};\n            \n            /**\n             * Collect the field models on our part and trash them.\n             */\n            this.trash = [];\n            this.removeFields(partModel.get('formContentData').models, this);\n            this.trash.forEach( function( model ) {\n                model.collection.remove( model );\n            } );\n\n\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'removePart', partModel, null, label, data );\n\t\t\t/*\n\t\t\t * Remove our part.\n\t\t\t */\n\t\t\tpartModel.collection.remove( partModel );\n\t\t},\n        \n        removeFields: function( collection, that ) {\n            _.each( collection, function( model ) {\n                if ( 'undefined' != typeof model ) {\n                    if ( 'undefined' != typeof model.get( 'fields' ) ) {\n                        that.removeFields( model.get( 'fields' ).models, that );\n                    } else if ( 'undefined' != typeof model.get( 'cells' ) ) {\n                        that.removeFields( model.get( 'cells' ).models, that );\n                    } else if ( 'undefined' != model.get( 'id' ) ) {\n                        that.trash.push( model );\n                    }\n                }\n            });\n        },\n\n\t\tclickDuplicate: function( e, settingModel, partModel, settingView ) {\n\t\t\tvar partClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', partModel );\n\n            partClone.set( 'key', Math.random().toString( 36 ).replace( /[^a-z]+/g, '' ).substr( 0, 8 ) );\n            \n            //////////////////////\n            \n            var duplicatedFields = [];\n            var formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n            var currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n            var currentDomainID = currentDomain.get( 'id' );\n            \n            // If Layout and Styles is enabled...\n            if( 'undefined' != typeof formContentLoadFilters[4] ) {\n                _.each( partClone.get( 'formContentData' ).models, function( row, rowIndex ) {\n                    duplicatedFields[ rowIndex ] = [];\n                    _.each( row.get( 'cells' ).models, function( cell, cellIndex ) {\n                        duplicatedFields[ rowIndex ][ cellIndex ] = [];\n                        _.each( cell.get( 'fields' ).models, function( field, fieldIndex ) {\n                            var newField = nfRadio.channel( 'app' ).request( 'clone:modelDeep', field );\n\n                            // Update our ID to the new tmp id.\n                            var tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\n                            newField.set( 'id', tmpID );\n                            // Add new model.\n                            duplicatedFields[ rowIndex ][ cellIndex ][ fieldIndex ] = nfRadio.channel( currentDomainID ).request( 'add', newField, true, false, 'duplicate' );\n                        } );\n                    } );\n                } );\n                for(var i = 0; i < duplicatedFields.length; i++) {\n                    for(var ii = 0; ii < duplicatedFields[i].length; ii++) {\n                            partClone.get('formContentData').models[i].get('cells').models[ii].get('fields').models = duplicatedFields[i][ii];\n                    }\n                }\n            }\n            // Otherwise (Layout and Styles is not enabled)...\n            else {\n                _.each( partClone.get( 'formContentData' ).models, function( model, index ) {\n                    // Leverage core's Add/Duplicate to generate a new field key.\n                    nfRadio.channel( currentDomainID ).request( 'add', /* model */ model, /* silent */ false, /* renderTrigger */ false, /* action */ 'duplicate' );\n                });\n            }\n            \n            ///////////////////////\n            \n\t\t\tpartModel.collection.add( partClone );\n\t\t\tpartClone.set( 'order', partModel.get( 'order' ) );\n\t\t\tpartModel.collection.updateOrder();\n\t\t\tpartModel.collection.setElement( partClone );\n\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t// Update our preview\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Part',\n\t\t\t\tlabel: partClone.get( 'title' ),\n\t\t\t\tchange: 'Duplicated',\n\t\t\t\tdashicon: 'admin-page'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: partClone.collection\n\t\t\t};\n\n\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'duplicatePart', partClone, null, label, data );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listen for drag events on our arrows.\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine(\t'controllers/gutterDroppables',[],\tfunction () {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'over:gutter', this.over );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'out:gutter', this.out );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'drop:rightGutter', this.dropRight );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'drop:leftGutter', this.dropLeft );\n\t\t},\n\n\t\tover: function( ui, partCollection ) {\n\t\t\t/*\n\t\t\t * Remove any other draggable placeholders.\n\t\t\t */\n\t\t\tjQuery( '#nf-main' ).find( '.nf-fields-sortable-placeholder' ).addClass( 'nf-sortable-removed' ).removeClass( 'nf-fields-sortable-placeholder' );\n\n\t\t\t// Trigger Ninja Forms default handler for being over a field sortable.\n\t\t\tui.item = ui.draggable;\n\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\n\t\t\t/*\n\t\t\t * If we hover over our droppable for more than x seconds, change the part.\n\t\t\t */\n\t\t\t// setTimeout( this.changePart, 1500, ui, partCollection );\n\t\t},\n\n\t\tout: function( ui, partCollection ) {\n\t\t\t/*\n\t\t\t * Re-add any draggable placeholders that we removed.\n\t\t\t */\n\t\t\tjQuery( '#nf-main' ).find( '.nf-sortable-removed' ).addClass( 'nf-fields-sortable-placeholder' );\n\t\t\t\n\t\t\t// Trigger Ninja Forms default handler for being out of a field sortable.\n\t\t\tui.item = ui.draggable;\n\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\n\t\t\t/*\n\t\t\t * If we hover over our droppable for more than x seconds, change the part.\n\t\t\t */\n\t\t\t// clearTimeout( this.changePart );\n\t\t},\n\n\t\tdrop: function( ui, partCollection, dir ) {\n\t\t\tui.draggable.dropping = true;\n\t\t\tui.item = ui.draggable;\n\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\n\n\t\t\t/*\n\t\t\t * If we hover over our droppable for more than x seconds, change the part.\n\t\t\t */\n\t\t\t// clearTimeout( this.changePart );\t\t\t\t\n\t\t},\n\n\t\tdropLeft: function( ui, partCollection ) {\n\t\t\tthis.drop( ui, partCollection, 'left' );\n\t\t\t/*\n\t\t\t * Check to see if we have a previous part.\n\t\t\t */\n\t\t\tif ( ! partCollection.hasPrevious() ) return;\n\t\t\t/*\n\t\t\t * If we're dealing with a field that already exists on our form, handle moving it.\n\t\t\t */\n\t\t\tif ( jQuery( ui.draggable ).hasClass( 'nf-field-wrap' ) ) {\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', jQuery( ui.draggable ).data( 'id' ) );\n\t\t\t\t/*\n\t\t\t\t * Add the dragged field to the previous part.\n\t\t\t\t */\n\t\t\t\tvar oldOrder = fieldModel.get( 'order' );\n\n\t\t\t\tpartCollection.getFormContentData().trigger( 'remove:field', fieldModel );\n\t\t\t\tvar previousPart = partCollection.at( partCollection.indexOf( partCollection.getElement() ) - 1 );\n\t\t\t\tpreviousPart.get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Register our part change to the change manager.\n\t\t\t\t */\n\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t// Update our preview\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t\t// Add our field addition to our change log.\n\t\t\t\tvar label = {\n\t\t\t\t\tobject: 'Field',\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\t\tchange: 'Changed Part',\n\t\t\t\t\tdashicon: 'image-flip-horizontal'\n\t\t\t\t};\n\n\t\t\t\tvar data = {\n\t\t\t\t\toldPart: partCollection.getElement(),\n\t\t\t\t\tnewPart: previousPart,\n\t\t\t\t\tfieldModel: fieldModel,\n\t\t\t\t\toldOrder: oldOrder\n\t\t\t\t};\n\n\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'fieldChangePart', previousPart, null, label, data );\n\n\t\t\t} else if ( jQuery( ui.draggable ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.draggable ).data( 'id' );\n\t\t\t\tvar fieldModel = this.addField( type, partCollection );\n\t\t\t\t/*\n\t\t\t\t * We have a previous part. Add the new field to it.\n\t\t\t\t */\n\t\t\t\tpartCollection.at( partCollection.indexOf( partCollection.getElement() ) - 1 ).get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * We are dropping a stage\n\t\t\t\t */\n\t\t\t\t\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t// Grab our staged fields.\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t\t// Add our field.\n\t\t\t\t\t\n\t\t\t\t\tvar fieldModel = this.addField( field.get( 'slug' ), partCollection );\n\t\t\t\t\tpartCollection.at( partCollection.indexOf( partCollection.getElement() ) - 1 ).get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t\t}, this );\n\n\t\t\t\t// Clear our staging\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t}\n\t\t},\n\n\t\tdropRight: function( ui, partCollection ) {\n\t\t\tthis.drop( ui, partCollection );\n\t\t\t/*\n\t\t\t * If we're dealing with a field that already exists on our form, handle moving it.\n\t\t\t */\n\t\t\tif ( jQuery( ui.draggable ).hasClass( 'nf-field-wrap' ) ) {\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', jQuery( ui.draggable ).data( 'id' ) );\n\t\t\t\t/*\n\t\t\t\t * Check to see if we have a next part.\n\t\t\t\t */\n\t\t\t\tif ( partCollection.hasNext() ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Add the dragged field to the next part.\n\t\t\t\t\t */\n\t\t\t\t\tvar oldOrder = fieldModel.get( 'order' );\n\n\t\t\t\t\tpartCollection.getFormContentData().trigger( 'remove:field', fieldModel );\n\t\t\t\t\tvar nextPart = partCollection.at( partCollection.indexOf( partCollection.getElement() ) + 1 );\n\t\t\t\t\tnextPart.get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t\t\n\t\t\t\t\t/*\n\t\t\t\t\t * Register our part change to the change manager.\n\t\t\t\t\t */\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Field',\n\t\t\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\t\t\tchange: 'Changed Part',\n\t\t\t\t\t\tdashicon: 'image-flip-horizontal'\n\t\t\t\t\t};\n\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\toldPart: partCollection.getElement(),\n\t\t\t\t\t\tnewPart: nextPart,\n\t\t\t\t\t\tfieldModel: fieldModel,\n\t\t\t\t\t\toldOrder: oldOrder\n\t\t\t\t\t};\n\n\t\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'fieldChangePart', nextPart, null, label, data );\n\n\t\t\t\t} else {\n\t\t\t\t\tvar oldPart = partCollection.getElement();\n\t\t\t\t\t/*\n\t\t\t\t\t * Add the dragged field to a new part.\n\t\t\t\t\t */\n\t\t\t\t\tpartCollection.getFormContentData().trigger( 'remove:field', fieldModel );\n\t\t\t\t\tvar newPart = partCollection.append( { formContentData: [ fieldModel.get( 'key' ) ] } );\n\t\t\t\t\tpartCollection.setElement( newPart );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Register our new part to the change manager.\n\t\t\t\t\t */\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Part',\n\t\t\t\t\t\tlabel: newPart.get( 'title' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: newPart.collection,\n\t\t\t\t\t\toldPart: oldPart,\n\t\t\t\t\t\tfieldModel: fieldModel\n\t\t\t\t\t};\n\n\t\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'addPart', newPart, null, label, data );\n\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.draggable ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.draggable ).data( 'id' );\n\t\t\t\tvar fieldModel = this.addField( type, partCollection );\n\t\t\t\tif ( partCollection.hasNext() ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * We have a next part. Add the new field to it.\n\t\t\t\t\t */\n\t\t\t\t\tpartCollection.at( partCollection.indexOf( partCollection.getElement() ) + 1 ).get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t/*\n\t\t\t\t\t * We don't have a next part, so add a new one, then add this field to it.\n\t\t\t\t\t */\n\t\t\t\t\tvar newPart = partCollection.append( { formContentData: [ fieldModel.get( 'key' ) ] } );\n\t\t\t\t\tpartCollection.setElement( newPart );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Register our new part to the change manager.\n\t\t\t\t\t */\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Part',\n\t\t\t\t\t\tlabel: newPart.get( 'title' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: newPart.collection,\n\n\t\t\t\t\t};\n\n\t\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'addPart', newPart, null, label, data );\n\n\t\t\t\t\treturn newPart;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t// Grab our staged fields.\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\t\t\n\t\t\t\tvar keys = [];\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t\t// Add our field.\n\t\t\t\t\tvar fieldModel = this.addField( field.get( 'slug' ), partCollection );\n\t\t\t\t\tif ( partCollection.hasNext() ) {\n\t\t\t\t\t\tpartCollection.at( partCollection.indexOf( partCollection.getElement() ) + 1 ).get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeys.push( fieldModel.get( 'key' ) );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, this );\n\n\t\t\t\tif ( ! partCollection.hasNext() ) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Add each of our fields to our next part\n\t\t\t\t\t */\n\t\t\t\t\tvar newPart = partCollection.append( { formContentData: keys } );\n\t\t\t\t\tpartCollection.setElement( newPart );\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Register our new part to the change manager.\n\t\t\t\t\t */\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Part',\n\t\t\t\t\t\tlabel: newPart.get( 'title' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: newPart.collection\n\t\t\t\t\t};\n\n\t\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'addPart', newPart, null, label, data );\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t// Clear our staging\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t}\n\t\t},\n\n\t\taddField: function( type, collection ) {\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \n\t\t\t// Add our field\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\n\t\t\t\tlabel: fieldType.get( 'nicename' ),\n\t\t\t\ttype: type\n\t\t\t} );\n\n\t\t\tcollection.getFormContentData().trigger( 'remove:field', fieldModel );\n\t\t\treturn fieldModel;\n\t\t},\n\n\t\tchangePart: function( ui, partCollection ) {\n\t\t\tpartCollection.next();\n\t\t\tjQuery( ui.helper ).draggable();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Stores part setting information.\n *\n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/partSettings',[], function( SettingGroupCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Instantiate our setting group collection\n\t\t\t */\n\t\t\tthis.setupCollection();\n\n\t\t\t// Respond to requests for our part setting group collection\n\t\t\tnfRadio.channel( 'mp' ).reply( 'get:settingGroupCollection', this.getCollection, this );\n\t\t},\n\n\t\tsetupCollection: function() {\n\t\t\tvar settingGroupCollection = nfRadio.channel( 'app' ).request( 'get:settingGroupCollectionDefinition' );\n\t\t\tthis.collection = new settingGroupCollection([\n\t\t\t\t{\n\t\t\t\t\tid: 'primary',\n\t\t\t\t\tlabel: '',\n\t\t\t\t\tdisplay: true,\n\t\t\t\t\tpriority: 100,\n\t\t\t\t\tsettings: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'title',\n\t\t\t\t\t\t\ttype: 'textbox',\n\t\t\t\t\t\t\tlabel: 'Part Title',\n\t\t\t\t\t\t\twidth: 'full',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'mp_remove',\n\t\t\t\t\t\t\ttype: 'html',\n\t\t\t\t\t\t\twidth: 'one-half',\n\t\t\t\t\t\t\tvalue: '<a href=\"#\" class=\"nf-remove-part nf-button secondary extra\">Remove Part</a>'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t] );\n\t\t\t// only allow part duplication if Layouts & Styles exist\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent'  ).request( 'get:loadFilters' );\n\t\t\tif( 'undefined' != typeof formContentLoadFilters[4] ) {\n\t\t\t\t var colSettings  = this.collection.models[0].get( 'settings' );\n\t\t\t\t\t colSettings.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'mp_duplicate',\n\t\t\t\t\t\ttype: 'html',\n\t\t\t\t\t\twidth: 'one-half',\n\t\t\t\t\t\tvalue: '<a href=\"#\" class=\"nf-duplicate-part nf-button secondary extra\">Duplicate Part</a>'\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Return our setting group collection.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return backbone.collection\n\t\t */\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Handles events for the part items in our bottom drawer.\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine(\t'controllers/partDroppable',[],\tfunction () {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'over:part', this.over );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'out:part', this.out );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'drop:part', this.drop );\n\t\t},\n\n\t\tover: function( e, ui, partModel, partView ) {\n\t\t\t/*\n\t\t\t * Remove any other draggable placeholders.\n\t\t\t */\n\t\t\tjQuery( '#nf-main' ).find( '.nf-fields-sortable-placeholder' ).addClass( 'nf-sortable-removed' ).removeClass( 'nf-fields-sortable-placeholder' );\n\n\t\t\t// Trigger Ninja Forms default handler for being over a field sortable.\n\t\t\tui.item = ui.draggable;\n\n\t\t\tif ( jQuery( ui.draggable ).hasClass( 'nf-field-type-draggable' ) || jQuery( ui.draggable ).hasClass( 'nf-stage' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t} else {\n\t\t\t\tjQuery( ui.helper ).css( { 'width': '300px', 'height': '50px', 'opacity': '0.7' } );\n\t\t\t}\n\t\t},\n\n\t\tout: function( e, ui, partModel, partView ) {\n\t\t\t/*\n\t\t\t * Re-add any draggable placeholders that we removed.\n\t\t\t */\n\t\t\tjQuery( '#nf-main' ).find( '.nf-sortable-removed' ).addClass( 'nf-fields-sortable-placeholder' );\n\n\t\t\t// Trigger Ninja Forms default handler for being out of a field sortable.\n\t\t\tui.item = ui.draggable;\n\t\t\tif ( jQuery( ui.draggable ).hasClass( 'nf-field-type-draggable' ) || jQuery( ui.draggable ).hasClass( 'nf-stage' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t} else {\n\t\t\t\t// Get our sortable element.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t// Get our fieldwidth.\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\n\t\t\t\tvar fieldHeight = jQuery( sortableEl ).height();\n\n\t\t\t\tjQuery( ui.helper ).css( { 'width': fieldWidth, 'height': '', 'opacity': '' } );\n\t\t\t}\n\t\t},\n\n\t\tdrop: function( e, ui, partModel, partView ) {\n\t\t\tui.draggable.dropping = true;\n\t\t\t// Trigger Ninja Forms default handler for being out of a field sortable.\n\t\t\tui.item = ui.draggable;\n\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\n\t\t\tjQuery( ui.draggable ).effect( 'transfer', { to: jQuery( partView.el ) }, 500 );\n\n\t\t\tif ( jQuery( ui.draggable ).hasClass( 'nf-field-wrap' ) ) { // Dropping a field that already exists\n\t\t\t\tthis.dropField( e, ui, partModel, partView );\n\t\t\t} else if ( jQuery( ui.draggable ).hasClass( 'nf-field-type-draggable' ) ) { // Dropping a new field\n\t\t\t\tthis.dropNewField( e, ui, partModel, partView );\n\t\t\t} else if ( jQuery( ui.draggable ).hasClass( 'nf-stage' ) ) { // Dropping the staging area\n\t\t\t\tthis.dropStaging( e, ui, partModel, partView );\n\t\t\t}\n\t\t},\n\n\t\tdropField: function( e, ui, partModel, partView ) {\n\t\t\t/*\n\t\t\t * If we are dropping a field that exists on our form already:\n\t\t\t * Remove it from the current part.\n\t\t\t * Add it to the new part.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\n\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', jQuery( ui.draggable ).data( 'id' ) );\n\t\t\tvar oldOrder = fieldModel.get( 'order' );\n\t\t\tvar oldPart = partModel.collection.getElement();\n\t\t\tvar newPart = partModel;\n\n\t\t\t/*\n\t\t\t * Add the dragged field to the previous part.\n\t\t\t */\n\t\t\tpartModel.collection.getFormContentData().trigger( 'remove:field', fieldModel );\n\t\t\tpartModel.get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\n\t\t\t/*\n\t\t\t * Register our part change to the change manager.\n\t\t\t */\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t// Update our preview\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\tchange: 'Changed Part',\n\t\t\t\tdashicon: 'image-flip-horizontal'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\toldPart: oldPart,\n\t\t\t\tnewPart: newPart,\n\t\t\t\tfieldModel: fieldModel,\n\t\t\t\toldOrder: oldOrder\n\t\t\t};\n\n\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'fieldChangePart', partModel, null, label, data );\n\t\t},\n\n\t\tdropNewField: function( e, ui, partModel, partView ) {\n\t\t\tvar type = jQuery( ui.draggable ).data( 'id' );\n\t\t\tvar fieldModel = this.addField( type, partModel.collection );\n\t\t\t/*\n\t\t\t * We have a previous part. Add the new field to it.\n\t\t\t */\n\t\t\tpartModel.get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t},\n\n\t\tdropStaging: function( e, ui, partModel, partView ) {\n\t\t\t/*\n\t\t\t * We are dropping a stage\n\t\t\t */\n\t\t\t\n\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t// Grab our staged fields.\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\n\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t// Add our field.\n\t\t\t\tvar fieldModel = this.addField( field.get( 'slug' ), partModel.collection );\n\t\t\t\tpartModel.get( 'formContentData' ).trigger( 'append:field', fieldModel );\n\t\t\t}, this );\n\n\t\t\t// Clear our staging\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t},\t\n\n\t\taddField: function( type, collection ) {\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \n\t\t\t// Add our field\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\n\t\t\t\tlabel: fieldType.get( 'nicename' ),\n\t\t\t\ttype: type\n\t\t\t} );\n\n\t\t\tcollection.getFormContentData().trigger( 'remove:field', fieldModel );\n\t\t\treturn fieldModel;\n\t\t}\n\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles events for our bottom drawer part title sortable\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine(\t'controllers/partSortable',[],\tfunction () {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'start:partSortable', this.start );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'stop:partSortable', this.stop );\n\t\t\tthis.listenTo( nfRadio.channel( 'mp' ), 'update:partSortable', this.update );\n\t\t},\n\n\t\tstart: function( e, ui, collection, collectionView ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' );\n\t\t\t}\n\t\t},\n\n\t\tstop: function( e, ui, collection, collectionView ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\t}\n\t\t},\n\n\t\tupdate: function( e, ui, collection, collectionView ) {\n\t\t\tvar partModel = collection.findWhere( { key: jQuery( ui.item ).prop( 'id' ) } );\n\t\t\t/*\n\t\t\t * Store our current order.\n\t\t\t */\n\t\t\tvar oldOrder = {};\n\t\t\tcollection.each( function( partModel, index ) {\n\t\t\t\toldOrder[ partModel.get( 'key' ) ] = index;\n\t\t\t} );\n\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\n\t\t\tvar order = _.without( jQuery( collectionView.el ).sortable( 'toArray' ), '' );\n\t\t\t_.each( order, function( key, index ) {\n\t\t\t\tcollection.findWhere( { key: key } ).set( 'order', index );\n\t\t\t}, this );\n\t\t\tcollection.sort();\n\n\t\t\t/*\n\t\t\t * Register our part change to the change manager.\n\t\t\t */\n\t\t\t//Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t// Update our preview\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Part',\n\t\t\t\tlabel: partModel.get( 'title' ),\n\t\t\t\tchange: 'Sorted',\n\t\t\t\tdashicon: 'sort'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\toldOrder: oldOrder,\n\t\t\t\tcollection: collection\n\t\t\t};\n\n\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'sortParts', partModel, null, label, data );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Respond to undo requests.\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/undo',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addPart', this.undoAddPart, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removePart', this.undoRemovePart, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicatePart', this.undoDupilcatePart, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:fieldChangePart', this.undoFieldChangePart, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortParts', this.undoSortParts, this );\n\t\t},\n\n\t\tundoAddPart: function( change, undoAll ) {\n\t\t\tvar partModel = change.get( 'model' );\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar partCollection = data.collection;\n\t\t\tpartCollection.remove( partModel );\n\n\t\t\t/*\n\t\t\t * If we have a fieldModel, then we dragged an existing field to create our part.\n\t\t\t * Undoing should put that field back where it was.\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof data.fieldModel ) {\n\t\t\t\tdata.oldPart.get( 'formContentData' ).trigger( 'add:field', data.fieldModel );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Remove any changes that have this model.\n\t\t\t */\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tchangeCollection.remove( changeCollection.filter( { model: partModel } ) );\n\t\t\t\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoFieldChangePart: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar oldPart = data.oldPart;\n\t\t\tvar fieldModel = data.fieldModel;\n\t\t\tvar oldOrder = data.oldOrder;\n\t\t\tvar newPart = data.newPart;\n\n\t\t\tnewPart.get( 'formContentData' ).trigger( 'remove:field', fieldModel );\n\t\t\toldPart.get( 'formContentData' ).trigger( 'add:field', fieldModel );\n\t\t\t\t\t\t\n\t\t\tfieldModel.set( 'order', oldOrder );\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoRemovePart: function( change, undoAll ) {\n\t\t\tvar partModel = change.get( 'model' );\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar partCollection = data.collection;\n\t\t\tpartCollection.add( partModel );\n\t\t\t\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoDupilcatePart: function( change, undoAll ) {\n\t\t\tvar partModel = change.get( 'model' );\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar partCollection = data.collection;\n\t\t\tpartCollection.remove( partModel );\n\n\t\t\t/*\n\t\t\t * If we have a fieldModel, then we dragged an existing field to create our part.\n\t\t\t * Undoing should put that field back where it was.\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof data.fieldModel ) {\n\t\t\t\tdata.oldPart.get( 'formContentData' ).trigger( 'add:field', data.fieldModel );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Remove any changes that have this model.\n\t\t\t */\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tchangeCollection.remove( changeCollection.filter( { model: partModel } ) );\n\t\t\t\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoSortParts: function( change, undoAll ) {\n\t\t\tvar collection = change.get( 'data' ).collection;\n\t\t\tvar oldOrder = change.get( 'data' ).oldOrder;\n\n\t\t\tcollection.each( function( partModel ) {\n\t\t\t\tpartModel.set( 'order', oldOrder[ partModel.get( 'key' ) ] );\n\t\t\t} );\n\t\t\tcollection.sort();\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\n\t\t * @return void\n\t\t */\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\n\t\t\tif ( ! undoAll ) {\n\t\t\t\t// Update preview.\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tchangeCollection.remove( change );\n\t\t\t\tif ( 0 == changeCollection.length ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/*\n * Load our builder controllers\n */\ndefine( \n\t'controllers/loadControllers',[\n\t\t'controllers/data',\n\t\t'controllers/clickControls',\n\t\t'controllers/gutterDroppables',\n\t\t'controllers/partSettings',\n\t\t'controllers/partDroppable',\n\t\t'controllers/partSortable',\n\t\t'controllers/undo'\n\t], \n\tfunction\n\t(\n\t\tData,\n\t\tClickControls,\n\t\tGutterDroppables,\n\t\tPartSettings,\n\t\tPartDroppable,\n\t\tPartSortable,\n\t\tUndo\n\t)\n\t{\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnew Data();\n\t\t\tnew ClickControls();\n\t\t\tnew GutterDroppables();\n\t\t\tnew PartSettings();\n\t\t\tnew PartDroppable();\n\t\t\tnew PartSortable();\n\t\t\tnew Undo();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Top drawer part view\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/drawerItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'li',\n\t\ttemplate: '#nf-tmpl-mp-drawer-item',\n\n\t\tinitialize: function( options ) {\n\t\t\tthis.collectionView = options.collectionView;\n\t\t\tthis.listenTo( this.model, 'change:title', this.updatedTitle );\n\t\t\tthis.listenTo( this.model.collection, 'change:part', this.maybeChangeActive );\n\t\t},\n\n\t\tupdatedTitle: function() {\n\t\t\tthis.render();\n\t\t\tthis.collectionView.setULWidth( this.collectionView.el );\n\t\t},\n\n\t\tmaybeChangeActive: function() {\n\t\t\tjQuery( this.el ).removeClass( 'active' );\n\t\t\tif ( this.model == this.model.collection.getElement() ) {\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\n\t\t\t}\n\t\t},\n\n\t\tattributes: function() {\n\t\t\treturn {\n\t\t\t\tid: this.model.get( 'key' )\n\t\t\t}\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).droppable( {\n\t\t\t\tactiveClass: 'mp-drag-active',\n\t\t\t\thoverClass: 'mp-drag-hover',\n\t\t\t\taccept: '.nf-field-type-draggable, .nf-field-wrap, .nf-stage',\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'over:part', e, ui, that.model, that );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'out:part', e, ui, that.model, that );\n\t\t\t\t},\n\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'drop:part', e, ui, that.model, that );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.maybeChangeActive();\n\t\t},\n\n\t\tevents: {\n\t\t\t'click': 'click',\n\t\t},\n\n\t\tclick: function( e ) {\n\t\t\tnfRadio.channel( 'mp' ).trigger( 'click:part', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\tgetIndex: function() {\n\t\t\t\t\treturn that.model.collection.indexOf( that.model ) + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Drawer collection view.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/drawerCollection',[ 'views/drawerItem' ], function( DrawerItemView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'ul',\n\t\tchildView: DrawerItemView,\n\t\treorderOnSort: true,\n\t\t\n\t\tinitialize: function( options ) {\n\t\t\tthis.drawerLayoutView = options.drawerLayoutView;\n\n\t\t\t/*\n\t\t\t * When we resize our window, maybe show/hide pagination.\n\t\t\t */\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeEvent );\n\n\t\t\t/*\n\t\t\t * If our new part title is off screen in the drawer, scroll to it.\n\t\t\t */\n\t\t\tthis.listenTo( this.collection, 'change:part', this.maybeScroll );\n\t\t},\n\n\t\tmaybeScroll: function( partCollection ) {\n\t\t\tvar li = jQuery( this.el ).children( '#' + partCollection.getElement().get( 'key' ) );\n\t\t\tif ( 0 == jQuery( li ).length ) return false;\n\t\t\tvar marginLeft = parseInt( jQuery( li ).css( 'marginLeft' ).replace( 'px', '' ) );\n\t\t\tvar viewportWidth = jQuery( this.drawerLayoutView.viewport.el ).width();\n\t\t\tvar diff = jQuery( li ).offset().left + jQuery( li ).outerWidth() + marginLeft - viewportWidth;\n\n\t\t\tjQuery( this.drawerLayoutView.viewport.el ).animate( {\n\t\t\t\tscrollLeft: '+=' + diff\n\t\t\t}, 100 );\n\t\t},\n\n\t\tresizeEvent: function( e ) {\n\t\t\te.data.context.showHidePagination( e.data.context );\n\t\t},\n\n\t\tchildViewOptions: function( model, index ){\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\tcollectionView: that\n\t\t\t}\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\titems: 'li:not(.no-sort)',\n\t\t\t\thelper: 'clone',\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'update:partSortable', e, ui, that.collection, that );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'start:partSortable', e, ui, that.collection, that );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'stop:partSortable', e, ui, that.collection, that );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Set our UL width when we attach the html to the dom.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonAttach: function() {\n\t\t\tthis.setULWidth( this.el );\n\n\t\t\t/*\n\t\t\t * When load, hide the pagination arrows if they aren't needed.\n\t\t\t */\n\t\t\tthis.showHidePagination();\n\t\t},\n\n\t\t/**\n\t\t * Set the width of our UL based upon the size of its items.\n\t\t * \n\t\t * @since 3.0\n\t\t * @return void\n\t\t */\n\t\tsetULWidth: function( el ) {\n\t\t\tif ( 0 == jQuery( el ).find( 'li' ).length ) return;\n\n\t\t\tvar ulWidth = 0;\n\t\t\tjQuery( el ).find( 'li' ).each( function() {\n\t\t\t\tvar marginLeft = parseInt( jQuery( this ).css( 'marginLeft' ).replace( 'px', '' ) );\n\t\t\t\tulWidth += ( jQuery( this ).outerWidth() + marginLeft + 2 );\n\t\t\t} );\n\n\t\t\tjQuery( el ).width( ulWidth );\t\t\t\n\t\t},\n\n\t\tonRemoveChild: function() {\n\t\t\t/* \n\t\t\t * Change the size of our collection UL\n\t\t\t */\n\t\t\tthis.setULWidth( this.el );\n\t\t},\n\n\t\tonAddChild: function() {\n\t\t\t/* \n\t\t\t * Change the size of our collection UL\n\t\t\t */\n\t\t\tthis.setULWidth( this.el );\n\n\t\t\tthis.maybeScroll( this.collection );\n\t\t},\n\n\t\tonBeforeAddChild: function( childView ) {\n\t\t\tjQuery( this.el ).css( 'width', '+=100' );\n\t\t},\n\n\t\tshowHidePagination: function( context, viewportWidth ) {\n\t\t\tcontext = context || this;\n\n\t\t\tviewportWidth = viewportWidth || jQuery( context.el ).parent().parent().width() - 120;\n\n\t\t\tif ( jQuery( context.el ).width() >= viewportWidth ) {\n\t\t\t\tif ( ! jQuery( context.drawerLayoutView.el ).find( '.nf-mp-drawer-scroll' ).is( ':visible' ) ) {\n\t\t\t\t\tjQuery( context.drawerLayoutView.el ).find( '.nf-mp-drawer-scroll' ).show();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( jQuery( context.drawerLayoutView.el ).find( '.nf-mp-drawer-scroll' ).is( ':visible' ) ) {\n\t\t\t\t\tjQuery( context.drawerLayoutView.el ).find( '.nf-mp-drawer-scroll' ).hide();\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:gutters' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Main layout view\n *\n * Regions:\n * mainContent\n * drawer\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/drawerLayout',[ 'views/drawerCollection' ], function( DrawerCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#nf-tmpl-mp-drawer-layout',\n\t\tregions: {\n\t\t\tviewport: '#nf-mp-drawer-viewport',\n\t\t},\n\n\t\tinitialize: function( options ) {\n\t\t\t/*\n\t\t\t * Make sure that our drawer resizes to match our screen upon resize or drawer open/close.\n\t\t\t */\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeWindow );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.beforeDrawerOpen );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.beforeDrawerClose );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( window ).off( 'resize', this.resizeWindow );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.viewport.show( new DrawerCollectionView( { collection: this.collection, drawerLayoutView: this } ) );\n\t\t},\n\n\t\t/**\n\t\t * When we attach this el to our dom, resize our viewport.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonAttach: function() {\n\t\t\tthis.resizeViewport( this.viewport.el );\n\t\t},\n\n\t\t/**\n\t\t * Resize our viewport.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tresizeViewport: function( viewportEl) {\n\t\t\t/*\n\t\t\t * If the drawer is closed, our viewport size is based upon the window size.\n\t\t\t *\n\t\t\t * If the drawer is opened, our viewport size is based upon the drawer size.\n\t\t\t */\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tif ( jQuery( builderEl ).hasClass( 'nf-drawer-opened' ) ) {\n\t\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\t\tvar targetWidth = targetWidth || jQuery( drawerEl ).outerWidth() - 140;\n\t\t\t} else {\n\t\t\t\tvar targetWidth = targetWidth || jQuery( window ).width() - 140;\n\t\t\t}\n\t\t\t\n\t\t\tjQuery( viewportEl ).width( targetWidth );\n\t\t},\n\n\t\t/**\n\t\t * When we resize our browser window, update our viewport size.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  {object} e \tevent object\n\t\t * @return void\n\t\t */\n\t\tresizeWindow: function( e ) {\n\t\t\te.data.context.resizeViewport( e.data.context.viewport.el );\n\t\t},\n\n\t\tbeforeDrawerOpen: function() {\n\t\t\tvar that = this;\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tvar targetWidth = jQuery( drawerEl ).width() - 60;\n\t\t\t\n\t\t\tjQuery( this.viewport.el ).animate( {\n\t\t\t\twidth: targetWidth\n\t\t\t}, 300, function() {\n\t\t\t\tthat.viewport.currentView.showHidePagination( null, targetWidth );\n\t\t\t\tthat.viewport.currentView.maybeScroll( that.collection );\n\t\t\t} );\n\t\t},\n\n\t\tbeforeDrawerClose: function() {\n\t\t\tvar that = this;\n\t\t\tvar targetWidth = jQuery( window ).width() - 140;\n\n\t\t\tjQuery( this.viewport.el ).animate( {\n\t\t\t\twidth: targetWidth\n\t\t\t}, 500, function() {\n\t\t\t\tthat.viewport.currentView.showHidePagination( null, targetWidth );\n\t\t\t\tthat.viewport.currentView.maybeScroll( that.collection );\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main layout view\n *\n * Regions:\n * mainContent\n * drawer\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/layout',[ 'views/drawerLayout' ], function( DrawerLayoutView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#nf-tmpl-mp-layout',\n\n\t\tregions: {\n\t\t\tmainContent: '#nf-mp-main-content',\n\t\t\tdrawer: '#nf-mp-drawer'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( this.collection, 'change:part', this.changePart );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.drawer.show( new DrawerLayoutView( { collection: this.collection } ) );\n\n\t\t\t/*\n\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t */\n\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\tvar callback = sortedArray[1];\n\t\t\tthis.formContentView = callback();\n\n\t\t\tthis.mainContent.show(  new this.formContentView( { collection: this.collection.getFormContentData() } ) );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-mp-drawer-scroll-previous': 'clickPrevious',\n\t\t\t'click .nf-mp-drawer-scroll-next': 'clickNext'\n\t\t},\n\n\t\tclickPrevious: function( e ) {\n\t\t\tvar that = this;\n\t\t\tvar scrollLeft = jQuery( this.drawer.currentView.viewport.el ).scrollLeft();\n\t\t\tvar lis = jQuery( this.drawer.currentView.viewport.currentView.el ).find( 'li' );\n\n\t\t\tjQuery( lis ).each( function( index ) {\n\t\t\t\t/*\n\t\t\t\t * If scrollLeft <= the left of this li, then we know we're at the first visible LI.\n\t\t\t\t * Move our scroll to the previous LI and return false.\n\t\t\t\t */\n\t\t\t\tif ( 0 < jQuery( this ).offset().left ) {\n\t\t\t\t\tvar marginLeft = parseInt( jQuery( this ).css( 'marginLeft' ).replace( 'px', '' ) );\n\t\t\t\t\tvar scrollLeft = jQuery( jQuery( lis )[ index - 1 ] ).outerWidth() + marginLeft + 5\n\t\t\t\t\tjQuery( that.drawer.currentView.viewport.el ).animate( {\n\t\t\t\t\t\tscrollLeft: '-=' + scrollLeft\n\t\t\t\t\t}, 300 );\n\t\t\t\t\treturn false;\t\t\t\n\t\t\t\t}\n\t\t\t} );\n\t\t\t\n\n\t\t},\n\n\t\tclickNext: function( e ) {\n\t\t\tvar that = this;\n\t\t\tvar ULWidth = jQuery( this.drawer.currentView.viewport.currentView.el ).width();\n\t\t\tvar viewportWidth = jQuery( this.drawer.currentView.viewport.el ).width();\n\t\t\tvar scrollLeft = jQuery( this.drawer.currentView.viewport.el ).scrollLeft();\n\t\t\tvar lis = jQuery( this.drawer.currentView.viewport.currentView.el ).find( 'li' );\n\t\t\tvar viewportTotal = viewportWidth + scrollLeft;\n\t\t\tvar widthCounter = 0;\n\t\t\tvar scrollLeft = 0;\n\n\t\t\tjQuery( lis ).each( function( index ) {\n\t\t\t\tvar marginLeft = parseInt( jQuery( this ).css( 'marginLeft' ).replace( 'px', '' ) );\n\t\t\t\twidthCounter += ( jQuery( this ).outerWidth() + marginLeft + 5 );\n\t\t\t\tif ( widthCounter >= viewportTotal ) {\n\t\t\t\t\tscrollLeft = jQuery( this ).outerWidth() + marginLeft + 5;\n\t\t\t\t\tjQuery( that.drawer.currentView.viewport.el ).animate( {\n\t\t\t\t\t\tscrollLeft: '+=' + scrollLeft\n\t\t\t\t\t}, 300 );\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tchangePart: function() {\n\t\t\tvar currentIndex = this.collection.indexOf( this.collection.getElement() );\n\t\t\tvar previousIndex = this.collection.indexOf( this.collection.previousElement );\n\n\t\t\tif ( currentIndex > previousIndex ) {\n\t\t\t\tvar hideDir = 'left';\n\t\t\t\tvar showDir = 'right';\n\t\t\t} else {\n\t\t\t\tvar hideDir = 'right';\n\t\t\t\tvar showDir = 'left';\n\t\t\t}\n\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Start our current part sliding out.\n\t\t\t */\n\t\t\tjQuery( this.mainContent.el ).hide( 'slide', { direction: hideDir }, 100, function() {\n\t\t\t\tthat.mainContent.empty();\n\t\t\t\tthat.mainContent.show( new that.formContentView( { collection: that.collection.getFormContentData() } ) );\n\t\t\t} );\n\n\t\t\tjQuery( this.mainContent.el ).show( 'slide', { direction: showDir }, 100 );\n\t\t\tjQuery( this.el ).closest( '.nf-app-main' ).scrollTop( 0 );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main content left gutter\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/gutterLeft',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#nf-tmpl-mp-gutter-left',\n\n\t\tevents: {\n\t\t\t'click .fa': 'clickPrevious'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.collection = nfRadio.channel( 'mp' ).request( 'get:collection' );\n\t\t\tthis.listenTo( this.collection, 'change:part', this.render );\n\t\t\tthis.listenTo( this.collection, 'sort', this.render );\n\t\t\tthis.listenTo( this.collection, 'remove', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.fa' ).droppable( {\n\t\t\t\t// Activate by pointer\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\t// Class added when we're dragging over\n\t\t\t\thoverClass: 'mp-circle-over',\n\t\t\t\tactiveClass: 'mp-circle-active',\n\t\t\t\t// Which elements do we want to accept?\n\t\t\t\taccept: '.nf-field-type-draggable, .nf-field-wrap, .nf-stage',\n\n\t\t\t\t/**\n\t\t\t\t * When we drag over this droppable, trigger a radio event.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @param  object \te  event\n\t\t\t\t * @param  object \tui jQuery UI element\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'over:gutter', ui, that.collection );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * When we drag out of this droppable, trigger a radio event.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @param  object \te  event\n\t\t\t\t * @param  object \tui jQuery UI element\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'out:gutter', ui, that.collection );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * When we drop on this droppable, trigger a radio event.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @param  object \te  event\n\t\t\t\t * @param  object \tui jQuery UI element\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'drop:leftGutter', ui, that.collection );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tclickPrevious: function( e ) {\n\t\t\tnfRadio.channel( 'mp' ).trigger( 'click:previous', e );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\thasPrevious: function() {\n\t\t\t\t\treturn that.collection.hasPrevious();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tchangePart: function( context ) {\n\t\t\tcontext.collection.previous();\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main content right gutter\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/gutterRight',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#nf-tmpl-mp-gutter-right',\n\n\t\tevents: {\n\t\t\t'click .next': 'clickNext',\n\t\t\t'click .new': 'clickNew'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.collection = nfRadio.channel( 'mp' ).request( 'get:collection' );\n\t\t\tthis.listenTo( this.collection, 'change:part', this.render );\n\t\t\tthis.listenTo( this.collection, 'sort', this.render );\n\t\t\tthis.listenTo( this.collection, 'remove', this.render );\n\t\t\tthis.listenTo( this.collection, 'add', this.render );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.render );\n\t\t},\n\n\t\ttest: function() {\n\t\t\tconsole.log( 'test test test' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.fa' ).droppable( {\n\t\t\t\t// Activate by pointer\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\t// Class added when we're dragging over\n\t\t\t\thoverClass: 'mp-circle-over',\n\t\t\t\tactiveClass: 'mp-circle-active',\n\t\t\t\t// Which elements do we want to accept?\n\t\t\t\taccept: '.nf-field-type-draggable, .nf-field-wrap, .nf-stage',\n\n\t\t\t\t/**\n\t\t\t\t * When we drag over this droppable, trigger a radio event.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @param  object \te  event\n\t\t\t\t * @param  object \tui jQuery UI element\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'over:gutter', ui, that.collection );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * When we drag out of this droppable, trigger a radio event.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @param  object \te  event\n\t\t\t\t * @param  object \tui jQuery UI element\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'out:gutter', ui, that.collection );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * When we drop on this droppable, trigger a radio event.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @param  object \te  event\n\t\t\t\t * @param  object \tui jQuery UI element\n\t\t\t\t * @return void\n\t\t\t\t */\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'mp' ).trigger( 'drop:rightGutter', ui, that.collection );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tclickNext: function( e ) {\n\t\t\tnfRadio.channel( 'mp' ).trigger( 'click:next', e );\n\t\t},\n\n\t\tclickNew: function( e ) {\n\t\t\tnfRadio.channel( 'mp' ).trigger( 'click:new', e );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\thasNext: function() {\n\t\t\t\t\treturn that.collection.hasNext();\n\t\t\t\t},\n\n\t\t\t\thasContent: function() {\n\t\t\t\t\treturn 0 != nfRadio.channel( 'fields' ).request( 'get:collection' ).length;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tchangePart: function( context ) {\n\t\t\tcontext.collection.next();\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#nf-tmpl-mp-main-content-fields-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t}\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\tjQuery( this.el ).parent().droppable( {\n\t\t\t\taccept: function( draggable ) {\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Add our view and content load filters.\n * \n * @package Ninja Forms Multi-Part\n * @subpackage Fields\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine(\n\t'controllers/filters',[\n\t\t'views/layout',\n\t\t'views/gutterLeft',\n\t\t'views/gutterRight',\n\t\t'views/mainContentEmpty',\n\t\t'models/partCollection',\n\t],\n\tfunction (\n\t\tLayoutView,\n\t\tGutterLeftView,\n\t\tGutterRightView,\n\t\tMainContentEmptyView,\n\t\tPartCollection\n\t)\n\t{\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'after:loadViews', this.addFilters );\n\t\t},\n\n\t\taddFilters: function() {\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.getLeftView, 1, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.getRightView, 1, this );\n\t\t\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.getContentView, 1 );\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.formContentSave, 1 );\n\t\t\t\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.formContentLoad, 1 );\n\n\t\t\t/*\n\t\t\t * Add a filter so that we can add a \"Parts\" group to the advanced conditions selects.\n\t\t\t */\n\t\t\tnfRadio.channel( 'conditions' ).request( 'add:groupFilter', this.conditionsFilter );\n\t\t\tnfRadio.channel( 'conditions-part' ).reply( 'get:triggers', this.conditionTriggers );\n\n\t\t\t/*\n\t\t\t * Listen to changes on our \"then\" statement.\n\t\t\t */\n\t\t\t// this.listenTo( nfRadio.channel( 'conditions' ), 'change:then', this.maybeAddElse );\n\n\t\t\tthis.emptyView();\n\t\t},\n\n\t\tgetLeftView: function() {\n\t\t\treturn GutterLeftView;\n\t\t},\n\n\t\tgetRightView: function() {\n\t\t\treturn GutterRightView;\n\t\t},\n\n\t\tformContentLoad: function( formContentData ) {\n\t\t\t/*\n\t\t\t * If the data has already been converted, just return it.\n\t\t\t */\n\t\t\tif ( true === formContentData instanceof PartCollection ) return formContentData;\n\n\t\t\t/*\n\t\t\t * If the data isn't converted, but is an array, let's make sure it's part data.\n\t\t\t */\n\t\t\tif ( _.isArray( formContentData ) && ! _.isEmpty( formContentData )  && 'undefined' != typeof _.first( formContentData ) && 'part' == _.first( formContentData ).type ) {\n\t\t\t\t/*\n\t\t\t\t * We have multi-part data. Let's convert it to a collection.\n\t\t\t\t */\n\t\t\t\tvar partCollection = new PartCollection( formContentData );\n\t\t\t} else {\n\t\t\t\tformContentData = ( 'undefined' == typeof formContentData ) ? nfRadio.channel( 'fields' ).request( 'get:collection' ).pluck( 'key' ) : formContentData; \n\n\t\t\t\t/*\n\t\t\t\t * We have unknown data. Create a new part collection and use the data as the content.\n\t\t\t\t */\n\t\t\t\tvar partCollection = new PartCollection( { formContentData: formContentData } );\n\t\t\t}\n\t\t\tnfRadio.channel( 'mp' ).request( 'init:partCollection', partCollection );\n\t\t\treturn partCollection;\n\t\t},\n\n\t\tgetContentView: function() {\n\t\t\treturn LayoutView;\n\t\t},\n\n\t\tformContentSave: function( partCollection ) {\n\t\t\t/*\n\t\t\t * For each of our part models, call the next save filter for its formContentData\n\t\t\t */\n\t\t\tvar newCollection = new Backbone.Collection();\n\t\t\t/*\n\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\n\t\t\t */\n\t\t\tvar formContentSaveFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\n\t\t\t\n\t\t\tpartCollection.each( function( partModel ) {\n\t\t\t\tvar attributes = _.clone( partModel.attributes );\n\n\t\t\t\t/* \n\t\t\t\t * Get our first filter, this will be the one with the highest priority.\n\t\t\t\t */\n\t\t\t\tvar sortedArray = _.without( formContentSaveFilters, undefined );\n\t\t\t\tvar callback = sortedArray[1];\n\t\t\t\tvar formContentData = callback( attributes.formContentData );\n\t\t\t\tattributes.formContentData = formContentData;\n\n\t\t\t\tnewCollection.add( attributes );\n\t\t\t} );\n\n\t\t\treturn newCollection.toJSON();\n\t\t},\n\n\t\temptyView: function() {\n\t\t\tthis.defaultMainContentEmptyView = nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty, this );\n\t\t},\n\n\t\tgetMainContentEmpty: function() {\n\t\t\tif ( 1 == nfRadio.channel( 'mp' ).request( 'get:collection' ).length ) {\n\t\t\t\treturn this.defaultMainContentEmptyView;\n\t\t\t} else {\n\t\t\t\treturn MainContentEmptyView;\n\t\t\t}\n\t\t},\n\n\t\tconditionsFilter: function( groups, modelType ) {\n\t\t\tvar partCollection = nfRadio.channel( 'mp' ).request( 'get:collection' );\n\t\t\tif ( 0 == partCollection.length || 'when' == modelType ) return groups;\n\n\t\t\tvar partOptions = partCollection.map( function( part ) {\n\t\t\t\treturn { key: part.get( 'key' ), label: part.get( 'title' ) };\n\t\t\t} );\n\n\t\t\tgroups.unshift( { label: 'Parts', type: 'part', options: partOptions } );\n\t\t\treturn groups;\n\t\t},\n\n\t\tconditionTriggers: function( defaultTriggers ) {\n\t\t\treturn {\n\t\t\t\tshow_field: {\n\t\t\t\t\tlabel: 'Show Part',\n\t\t\t\t\tvalue: 'show_part'\n\t\t\t\t},\n\n\t\t\t\thide_field: {\n\t\t\t\t\tlabel: 'Hide Part',\n\t\t\t\t\tvalue: 'hide_part'\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * When we change our then condition, if we are show/hiding a part add the opposite.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  {[type]} e         [description]\n\t\t * @param  {[type]} thenModel [description]\n\t\t * @return {[type]}           [description]\n\t\t */\n\t\tmaybeAddElse: function( e, thenModel ) {\n\t\t\tvar opposite = false;\n\t\t\t/*\n\t\t\t * TODO: Make this more dynamic.\n\t\t\t * Currently, show, hide, show option, and hide option are hard-coded here.\n\t\t\t */\n\t\t\tvar trigger = jQuery( e.target ).val();\n\t\t\tswitch( trigger ) {\n\t\t\t\tcase 'show_part':\n\t\t\t\t\topposite = 'hide_part';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'hide_part':\n\t\t\t\t\topposite = 'show_part';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( opposite ) {\n\t\t\t\tvar conditionModel = thenModel.collection.options.conditionModel;\n\t\t\t\tif( 'undefined' == typeof conditionModel.get( 'else' ).findWhere( { 'key': thenModel.get( 'key' ), 'trigger': opposite } ) ) {\n\t\t\t\t\tconditionModel.get( 'else' ).add( { type: thenModel.get( 'type' ), key: thenModel.get( 'key' ), trigger: opposite } );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","var nfRadio = Backbone.Radio;\n\nrequire( [ 'controllers/loadControllers', 'controllers/filters' ], function( LoadControllers, LoadFilters ) {\n\n\tvar NFMultiPart = Marionette.Application.extend( {\n\n\t\tinitialize: function( options ) {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'after:loadControllers', this.loadControllers );\n\t\t},\n\n\t\tloadControllers: function() {\n\t\t\tnew LoadControllers();\n\t\t},\n\n\t\tonStart: function() {\n\t\t\tnew LoadFilters();\n\t\t}\n\t} );\n\n\tvar nfMultiPart = new NFMultiPart();\n\tnfMultiPart.start();\n} );\ndefine(\"main\", function(){});\n\n"]}