{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","views/emptyCell.js","views/cellItem.js","models/cellFieldCollection.js","views/rowItem.js","views/rowCollection.js","models/cellModel.js","models/cellCollection.js","models/rowModel.js","models/rowCollection.js","controllers/data.js","controllers/maxCols.js","controllers/addField.js","controllers/cellSortable.js","controllers/gutterDroppable.js","controllers/rowsSortable.js","controllers/undo.js","controllers/updateFieldOrder.js","controllers/loadControllers.js","controllers/loadContent.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Marionette","ItemView","extend","tagname","template","EmptyCell","CollectionView","className","emptyView","dropping","initialize","options","this","collection","model","get","childView","nfRadio","channel","request","cellCollection","onRender","el","data","models","addClass","removeClass","initSortable","that","sortable","cancel","placeholder","opacity","items","tolerance","connectWith","refreshPositions","appendTo","helper","over","ui","trigger","out","sort","receive","item","start","stop","update","templateHelpers","renderHandleBefore","renderHandleAfter","events","click .delete","clickDeleteCell","Backbone","Collection","comparator","listenTo","removeField","_","each","set","cellModel","cid","silent","on","addField","updateCellModel","fieldCollection","removeModel","addModel","order","rowModel","remove","field","add","CellItemView","CellFieldCollection","reorderOnSort","childViewOptions","reply","updateGutters","render","onBeforeDestroy","off","maybeRender","find","rowView","droppable","hoverClass","accept","drop","elements","Split","minSize","onDragStart","onDrag","onDragEnd","cell","width","css","html","before","after","RowItemView","getEmptyView","maybeInitSortable","filter","rowCollection","show","handle","grid","Model","fieldModels","search","findField","findWhere","key","Number","updateRowModel","addCell","updateCellWidths","Math","round","floor","CellCollection","checkEmptyCells","updateMaxCols","appendField","maxCols","row","cells","fieldModel","every","RowCollection","overSortable","outFired","overCell","overRows","addRow","rowOrder","pluck","max","fields","updateOverSortable","val","getOverSortable","updateOutFired","getOutFired","updateOverCell","getOverCell","updateColClass","num","builderEl","builderClass","maybeAddRow","startDragging","stopDragging","received","getHelper","dragFieldType","setDropping","deleteCell","cellView","parent","prev","fieldID","type","oldOrder","isNumeric","newPos","label","object","change","dashicon","layouts","changeCollection","changeModel","hasClass","receiveNewField","receiveCurrentField","receiveFieldStaging","newModel","sortFields","stagedFields","insertedAt","senderOldOrder","receiverOldOrder","originalCollection","newCollection","target","height","element","clone","left","top","cellcid","fieldType","tmpID","draggable","draggableInstance","helperProportions","undoData","newRows","newRowModel","dropped","dragStart","drag","dragEnd","newCell","dropNewField","dropFieldStaging","dropCurrentField","oldCollection","widths","getDraggedWidths","percentLeft","a","percentRight","b","gutter","append","awidth","bwidth","modelA","modelB","oldModelAWidth","oldModelBWidth","renderField","rowsView","rowcid","droppedRow","oldCID","prevOrder","droppedOrder","undoLabel","changeAction","actionModel","parseInt","newOrder","newRow","undoMovedBetweenCells","undoGutterDropNewField","undoGutterSplitCell","undoCellSorting","undoRemovedCell","undoCellNewField","undoRowNewField","undoGutterResize","undoMovedToNewRow","undoRowSorting","undoAll","maybeRemoveChange","enableNextChange","found","updateFieldOrder","rowIndex","cellIndex","fieldIndex","Data","MaxCols","AddField","CellSortable","GutterDroppable","RowsSortable","Undo","UpdateFieldOrder","RowCollectionView","LoadControllers","loadControllers","getFormContentView","formContentSave","formContentLoad","rows","JSON","parse","stringify","formContentData","empty","rowArray","formContentLoadFilters","mpEnabled","isArray","first","flatten","isEmpty","nfLayouts","some","Radio","LoadContent","Application","afterNFLoad","onStart","app"],"mappings":"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","file":"builder.js","sourcesContent":["(function () {\n","/**\r\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice,\r\n        jsSuffixRegExp = /\\.js$/;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split(\"/\"),\r\n            map = config.map,\r\n            starMap = (map && map['*']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === \".\") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                name = name.split('/');\r\n                lastIndex = name.length - 1;\r\n\r\n                // Node .js allowance:\r\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\r\n                }\r\n\r\n                //Lop off the last part of baseParts, so that . matches the\r\n                //\"directory\" and not name of the baseName's module. For instance,\r\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\r\n                //want the directory, \"one/two\" for this normalization.\r\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === \".\") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === \"..\") {\r\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with '..'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join(\"/\");\r\n            } else if (name.indexOf('./') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split('/');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join(\"/\");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join('/')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join('/');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            var args = aps.call(arguments, 0);\r\n\r\n            //If first arg is not require('string'), and there is only\r\n            //one arg, it is the array form without a callback. Insert\r\n            //a null so that the following concat is correct.\r\n            if (typeof args[0] !== 'string' && args.length === 1) {\r\n                args.push(null);\r\n            }\r\n            return req.apply(undef, args.concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error('No ' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf('!') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + '!' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== 'undefined') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: '',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            callbackType = typeof callback,\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (callbackType === 'undefined' || callbackType === 'function') {\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === \"require\") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === \"exports\") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === \"module\") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + ' missing ' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback ? callback.apply(defined[name], args) : undefined;\r\n\r\n            if (name) {\r\n                //If setting exports via \"module\" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === \"string\") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (config.deps) {\r\n                req(config.deps, config.callback);\r\n            }\r\n            if (!callback) {\r\n                return;\r\n            }\r\n\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require(['a'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === 'function') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require('id') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        return req(cfg);\r\n    };\r\n\r\n    /**\r\n     * Expose module registry for debugging and tooling\r\n     */\r\n    requirejs._defined = defined;\r\n\r\n    define = function (name, deps, callback) {\r\n        if (typeof name !== 'string') {\r\n            throw new Error('See almond README: incorrect module build, no module name');\r\n        }\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n\ndefine(\"../lib/almond\", function(){});\n\n","/*\r\n * View that is rendered if we have no fields within a cell.\r\n */\r\ndefine( 'views/emptyCell',[], function() {\r\n\tvar view = Marionette.ItemView.extend( {\r\n\t\ttagname: 'div',\r\n\t\ttemplate: '#nf-tmpl-empty-cell'\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Individual cell view.\r\n *\r\n */\r\ndefine( 'views/cellItem',['views/emptyCell'], function( EmptyCell ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagname: 'div',\r\n\t\tclassName: 'layouts-cell',\r\n\t\temptyView: EmptyCell,\r\n\t\tdropping: false,\r\n\r\n\t\tinitialize: function( options ) {\r\n\t\t\t// Set our collection to the fields within this cell\r\n\t\t\tthis.collection = this.model.get( 'fields' );\r\n\t\t\t// Get our field view from Ninja Forms core.\r\n\t\t\tthis.childView = nfRadio.channel( 'views' ).request( 'get:fieldItem' );\r\n\t\t\t// Get the collection to which this cell belongs.\r\n\t\t\tthis.cellCollection = options.cellCollection;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render we need to:\r\n\t\t * 1) Set a data attribute on our cell element representing width.\r\n\t\t * 2) Set a data attribute on our cell element representing the cell model.\r\n\t\t * 3) Set classes on our cell element based upon how many fields it contains.\r\n\t\t * 4) Make our cell sortable droppable if we have more than one cell in the collection.\r\n\t\t * 5) Init our sortable.\r\n\t\t * \r\n\t\t * @since  version\r\n\t\t * @return {[type]} [description]\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tjQuery( this.el ).data( 'width', this.model.get( 'width' ) );\r\n\t\t\tjQuery( this.el ).data( 'model', this.model );\r\n\t\t\t// Used during troubleshooting to add a class to the cell element.\r\n\t\t\t// jQuery( this.el ).addClass( this.model.cid );\r\n\r\n\t\t\t// if ( 1 < this.cellCollection.length ) {\r\n\t\t\t\t// jQuery( this.el ).addClass( 'layouts-droppable nf-fields-sortable' );\t\r\n\t\t\t// } else { // we want a draggable.\r\n\r\n\t\t\t// }\r\n\t\t\t\r\n\t\t\t// Set a class based upon how many fields are in our cell.\r\n\t\t\tif ( this.collection.models.length == 1 ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'single-field' );\r\n\t\t\t\tjQuery( this.el ).removeClass( 'multi-field' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).addClass( 'multi-field' );\r\n\t\t\t\tjQuery( this.el ).removeClass( 'single-field' );\r\n\t\t\t}\r\n\r\n\t\t\t// Make this cell droppable if we have more than one field.\r\n\t\t\tif ( 1 < this.cellCollection.length ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'layouts-droppable' );\t\r\n\t\t\t\t// If we have multiple cells in this row, make this cell droppable for new fields\r\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).removeClass( 'nf-field-type-droppable' );\r\n\t\t\t\tjQuery( this.el ).removeClass( 'layouts-droppable' );\t\r\n\t\t\t}\r\n\r\n\t\t\t// Init our sortable.\r\n\t\t\tthis.initSortable();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Initialize our sortable.\r\n\t\t * Sends out radio messages when there are sortable events.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tinitSortable: function() {\r\n\t\t\tvar that = this;\r\n\t\t\tjQuery( this.el ).sortable( {\r\n\t\t\t\t// Don't let the item controls be used as a handle.\r\n\t\t\t\tcancel: '.nf-item-controls',\r\n\t\t\t\t// Class name of our placeholder. Adds the green highlight.\r\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\r\n\t\t\t\t// Opacity of the draggable\r\n\t\t\t\topacity: 0.95,\r\n\t\t\t\t// Acceptable items.\r\n\t\t\t\titems: '.nf-field-wrap, .nf-stage',\r\n\t\t\t\t// We care about the pointer, not an intersection.\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\t// Allows us to drop items from this sortable into others.\r\n\t\t\t\tconnectWith: '.layouts-droppable',\r\n\t\t\t\t// Update droppable areas as we drag. Important because of the \"swell\" effect on the builder.\r\n\t\t\t\trefreshPositions: true,\r\n\t\t\t\tappendTo: '#nf-main',\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Return a helper that will be used for the drag event of the sortable.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e event object\r\n\t\t\t\t * @return object   drag element\r\n\t\t\t\t */\r\n\t\t\t\thelper: function( e ) {\r\n\t\t\t\t\tvar element = nfRadio.channel( 'layouts' ).request( 'getHelper:cellSortable', e, that, this );\r\n\t\t\t\t\treturn element;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we hover over our sortable while dragging, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'over:cellSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we hover over out of our sortable while dragging, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'out:cellSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we sort our sortable while dragging, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t        sort: function( e, ui) {\r\n\t\t        \t     \tnfRadio.channel( 'layouts' ).trigger( 'sort:cellSortable', e, ui, that, this );\r\n\t\t        },\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * When we receive an item, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\treceive: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'receive:cellSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we start dragging, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tstart: function( e, ui ) {\r\n\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'start:cellSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we stop dragging, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'stop:cellSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we update our sortable order, send out a radio message.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object e  event object\r\n\t\t\t\t * @param  object ui jQuery UI object\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'update:cellSortable', e, ui, that, this );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Template helper functions\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderHandleBefore: function() {\r\n\t\t\t\t\treturn '<div class=\"layouts-handle\"></div>';\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderHandleAfter: function() {\r\n\t\t\t\t\treturn '<div class=\"layouts-handle\"></div>';\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * View events\r\n\t\t * \r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tevents: {\r\n\t\t\t'click .delete': 'clickDeleteCell'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user clicks to delete a cell, remove the model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  {Object} e event object\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickDeleteCell: function( e ) {\r\n\t\t\tnfRadio.channel( 'layouts' ).trigger( 'click:deleteCell', e, this );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Holds all of our cell field models.\r\n * \r\n * @package Ninja Forms Layouts\r\n * @subpackage Fields\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/cellFieldCollection',[], function( ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tcomparator: 'cellOrder',\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\tthis.options = options;\r\n\t\t\t\r\n\t\t\t// Listen to requests to remove a field from a collection.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts-cell' ), 'remove:field', this.removeField );\r\n\t\t\t// We've been passed the cellModel to which this collection belongs.\r\n\t\t\t// this.options.cellModel = options.cellModel;\r\n\t\t\t_.each( models, function( model ) {\r\n\t\t\t\tif ( 'undefined' == typeof model ) return;\r\n\t\t\t\tmodel.set( 'cellcid', this.options.cellModel.cid, { silent: true } );\r\n\t\t\t}, this );\r\n\r\n\t\t\t// When we add or remove a field from this collection, update our cellModel.\r\n\t\t\tthis.on( 'add', this.addField, this );\r\n\t\t\tthis.on( 'remove', this.updateCellModel, this );\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\r\n\t\t\t// When we remove a model from our main field collection, make sure it's removed from this collection as well.\r\n\t\t\tfieldCollection.on( 'remove', this.removeModel, this );\r\n\r\n\t\t\t// When we add a model to our main field collection, add it to this collection if its cid matches\r\n\t\t\tfieldCollection.on( 'add', this.addModel, this );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our cell collection\r\n\t\t * @since 3.0\r\n\t\t */\r\n\t\t addField: function( model ) {\r\n\t\t \tmodel.set( 'cellcid', this.options.cellModel.cid, { silent: true } );\r\n\t\t \tif ( 1 == this.options.cellModel.collection.length ) {\r\n\t\t \t\tvar order = this.options.cellModel.collection.options.rowModel.get( 'order' );\r\n\t\t \t\tthis.remove( model );\r\n\t\t \t\tnfRadio.channel( 'layouts' ).request( 'add:row', this.options.cellModel.collection.options.rowModel.collection, { order: order, field: model } );\r\n\t\t \t}\r\n\t\t \tthis.updateCellModel();\r\n\t\t },\r\n\r\n\r\n\t\t/**\r\n\t\t * Update our cellModel.\r\n\t\t * @since 3.0\r\n\t\t */\r\n\t\tupdateCellModel: function() {\r\n\t\t\tthis.options.cellModel.set( 'fields', this );\r\n\t\t\tthis.options.cellModel.trigger( 'change:fields', this.options.cellModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Respond to requests to remove a field from a collection.\r\n\t\t * @since  3.0\r\n\t\t * @param  string id field ID\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveField: function( id ) {\r\n\t\t\tif ( this.get( id ) ) {\r\n\t\t\t\tthis.remove( this.get( id ) );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremoveModel: function( model ) {\r\n\t\t\tthis.remove( model );\r\n\t\t},\r\n\r\n\t\taddModel: function( model ) {\r\n\t\t\tif ( 'undefined' != typeof this.options.cellModel && this.options.cellModel.cid == model.get( 'cellcid' ) ) {\r\n\t\t\t\tthis.add( model );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Single row view\r\n */\r\ndefine( 'views/rowItem',['views/cellItem', 'models/cellFieldCollection'], function( CellItemView, CellFieldCollection ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagname: 'div',\r\n\t\tclassName: 'layouts-row',\r\n\t\tchildView: CellItemView,\r\n\t\treorderOnSort: true,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Set our collection to our cells.\r\n\t\t\tthis.collection = this.model.get( 'cells' );\r\n\t\t\t/*\r\n\t\t\t * Set our childViewOptions.\r\n\t\t\t * As the variable name suggests, this will be accessible within our child views.\r\n\t\t\t */\r\n\t\t\tthis.childViewOptions = {\r\n\t\t\t\tcellCollection: this.collection\r\n\t\t\t};\r\n\t\t\t// Respond to requests to update our gutter/divider positions\r\n\t\t\tnfRadio.channel( 'layouts' ).reply( 'update:gutters', this.updateGutters, this );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Bind listeners to row model events.\r\n\t\t\t */\r\n\t\t\t// this.model.on( 'destroy:cell', this.render, this );\r\n\t\t\tthis.collection.on( 'sort', this.render, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Bind listeners to our nf-builder so that we can track when the user is dragging rather than just mouse over.\r\n\t\t\t * Because our gutter/divider is a droppable that is very close to a sortable, sometimes the \"drop\" event will fire when we are just mousing over.\r\n\t\t\t * Tracking that state of the mouse lets us prevent this later.\r\n\t\t\t * \r\n\t\t\t */\r\n\t\t\tjQuery( '#nf-builder' ).on( 'mousedown', function() {\r\n\t\t\t\tjQuery( this ).data( 'mousedown', true );\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\tjQuery( '#nf-builder' ).on( 'mouseup', function() {\r\n\t\t\t\tjQuery( this ).data( 'mousedown', false );\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Before we destroy this view, unbind our model change listeners.\r\n\t\t * If we don't do this, we'll get JS errors.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\t// this.model.off( 'add:cell', this.render );\r\n\t\t\t// this.model.off( 'destroy:cell', this.render );\r\n\t\t\tthis.collection.off( 'sort', this.maybeRender );\r\n\t\t},\r\n\r\n\t\tmaybeRender: function() {\r\n\t\t\tif ( 1 < this.collection.models.length ) {\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render:\r\n\t\t * 1) Set our el id to the model cid\r\n\t\t * 2) Add a class based upon the number of cells in the row\r\n\t\t * 3) Remove any old gutters\r\n\t\t * 4) Update our gutters/dividers\r\n\t\t * 5) Init our gutters/dividers as droppables\r\n\t\t * \r\n\t\t * @since  version\r\n\t\t * @return {[type]} [description]\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// Set el ID\r\n\t\t\tjQuery( this.el ).prop( 'id', this.model.cid );\r\n\t\t\t// Add class based upon number of cells\r\n\t\t\tif ( this.collection.models.length == 1 ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'single-cell' );\r\n\t\t\t\tjQuery( this.el ).removeClass( 'multi-cell' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).addClass( 'multi-cell' );\r\n\t\t\t\tjQuery( this.el ).removeClass( 'single-cell' );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Remove any gutters. This prevents extra HTML markup from appearing.\r\n\t\t\tjQuery( this.el ).find( '.gutter' ).remove();\r\n\t\t\t// Update our gutters/dividers\r\n\t\t\tthis.updateGutters();\r\n\t\t\t// We want to access our rowView object later\r\n\t\t\tvar rowView = this;\r\n\t\t\t// Init our droppables.\r\n\t\t\tjQuery( this.el ).find( '.gutter' ).droppable( {\r\n\t\t\t\t// Activate by pointer\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\t// Class added when we're dragging over\r\n\t\t\t\thoverClass: 'nf-fields-sortable-placeholder',\r\n\t\t\t\t// Which elements do we want to accept?\r\n\t\t\t\taccept: '.nf-field-type-draggable, .nf-field-wrap, .nf-stage',\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we drag over this droppable, trigger a radio event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'over:gutterDroppable', e, ui, rowView, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we drag out of this droppable, trigger a radio event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'out:gutterDroppable', e, ui, rowView, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we drop on this droppable, trigger a radio event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tdrop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'drop:gutterDroppable', e, ui, rowView, this );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check for gutters in our row and activate them as sliders.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateGutters: function() {\r\n\t\t\t// Get our gutter elements\r\n\t\t\tvar elements = jQuery( this.el ).find( '.layouts-cell' );\r\n\t\t\tvar that = this;\r\n\t\t\t// Call split.js to create resizable cells.\r\n\t\t\tSplit( elements, {\r\n\t\t\t\tminSize: 50,\r\n\t\t\t\tcellCollection: that.collection,\r\n\t\t\t\t// When we start resizing our cell, trigger a radio event.\r\n\t\t\t\tonDragStart: function( data ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'dragStart:gutterSlider', data, that.collection );\r\n\t\t\t\t},\r\n\t\t\t\t// When we drag/resize our cell, trigger a radio event.\r\n\t\t\t\tonDrag: function( data ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'drag:gutterSlider', data, that.collection );\r\n\t\t\t\t},\r\n\t\t\t\t// When we stop resizing our cell, trigger a radio event.\r\n\t\t\t\tonDragEnd: function( data ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'dragEnd:gutterSlider', data, that.collection );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\t// Set the css width on our gutters\r\n\t\t\t_.each( jQuery( elements ), function( cell, index ) {\r\n\t\t\t\tvar width = jQuery( cell ).data( 'width' );\r\n\t\t\t\tvar gutterWidth = 10;\r\n\t\t\t\tif ( 0 == index || index == jQuery( elements ).length - 1 ) {\r\n\t\t\t\t\t// gutterWidth = 5;\r\n\t\t\t\t}\r\n\t\t\t\tjQuery( cell ).css( 'width', 'calc(' + width + '% - ' + gutterWidth + 'px)' );\r\n\t\t\t} );\r\n\r\n\t\t\t// Add a gutter/divider before our first cell and after our last cell.\r\n\t\t\tvar html = '<div class=\"gutter\" style=\"width: 10px; cursor: ew-resize;\"></div>';\r\n\t\t\tjQuery( this.el ).find( '.layouts-cell:first' ).before( html );\r\n\t\t\tjQuery( this.el ).find( '.layouts-cell:last' ).after( html );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Row collection (sortable) view.\r\n */\r\ndefine( 'views/rowCollection',['views/rowItem'], function( RowItemView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagname: 'div',\r\n\t\tclassName: 'layouts-row-collection layouts-droppable nf-field-type-droppable nf-fields-sortable',\r\n\t\tchildView: RowItemView,\r\n\t\treorderOnSort: true,\r\n\r\n\t\tgetEmptyView: function() {\r\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection.on( 'add', this.maybeInitSortable, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.collection.off( 'add', this.maybeInitSortable );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove any rows that are completely empty.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  {Backbone.Model} \t\trowModel\r\n\t\t * @param  {int} index\r\n\t\t * @param  {Backbone.Collection} \trowCollection [description]\r\n\t\t * @return {bool}\t\t\t\t\tShould this row be output in the collection view?\r\n\t\t */\r\n\t\tfilter: function( rowModel, index, rowCollection ) {\r\n\t\t\tvar show = false;\r\n\t\t\t_.each( rowModel.get( 'cells' ).models, function( cell ) {\r\n\t\t\t\tif ( 0 != cell.get( 'fields' ).length ) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\treturn show;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this view, init our rows collection sortable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.maybeInitSortable();\r\n\t\t},\r\n\r\n\t\tmaybeInitSortable: function() {\r\n\t\t\tif ( 0 < this.collection.models.length ) {\r\n\t\t\t\tthis.initSortable();\r\n\t\t\t}\t\t\t\r\n\t\t},\r\n\r\n\t\tinitSortable: function() {\r\n\t\t\tvar that = this;\r\n\t\t\t// Init our sortable.\r\n\t\t\tjQuery( this.el ).sortable( {\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\thandle: '.gutter:first',\r\n\t\t\t\titems: '.layouts-row',\r\n\t\t\t\tcancel: '.layouts-cell',\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\r\n\t\t\t\tappendTo: '#nf-main',\r\n\t\t\t\tgrid: [ 5, 5 ],\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we start dragging an item, trigger an event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'start:rowsSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we stop dragging an item, trigger an event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'stop:rowsSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we drag an item over our sortable, trigger an event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'over:rowsSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we move an item off of our sortable, trigger an event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'out:rowsSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we drop an item on the sortable, trigger an event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\treceive: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'receive:rowsSortable', e, ui, that, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * When we drop an item onto our sortable that changes our item order, trigger an event.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @param  object \te  event\r\n\t\t\t\t * @param  object \tui jQuery UI element\r\n\t\t\t\t * @return void\r\n\t\t\t\t */\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'update:rowsSortable', e, ui, that, this );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that holds our cell information\r\n * \r\n * @package Ninja Forms Layouts\r\n * @subpackage Layouts\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/cellModel',['models/cellFieldCollection'], function( CellFieldCollection) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tvar fieldModels = [];\r\n\r\n\t\t\t_.each( this.get( 'fields' ), function( search ) {\r\n\t\t\t\tif ( 'undefined' == typeof fieldCollection.get( search ) ) {\r\n\t\t\t\t\tvar findField = fieldCollection.findWhere( { key: search } );\r\n\t\t\t\t\tif ( 'undefined' != typeof findField ) {\r\n\t\t\t\t\t\tfieldModels.push( findField );\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfieldModels.push( fieldCollection.get( search ) );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tif ( false === this.get( 'fields' ) instanceof Backbone.Collection ) {\r\n\t\t\t\tthis.set( 'fields', new CellFieldCollection( fieldModels, { cellModel: this } ) );\r\n\t\t\t}\r\n            this.set( 'order', Number( this.get( 'order' ) ) );\r\n\t\t}\r\n\t\t\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Holds all of our cell models.\r\n * \r\n * @package Ninja Forms Layouts\r\n * @subpackage Fields\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/cellCollection',['models/cellModel'], function( cellModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: cellModel,\r\n\t\tcomparator: 'order',\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\tthis.options = options;\r\n\t\t\tthis.on( 'change:fields', this.updateRowModel, this );\r\n\t\t\tthis.on( 'add', this.addCell, this );\r\n\t\t\tthis.on( 'remove', this.updateCellWidths, this );\r\n\t\t},\r\n\r\n\t\taddCell: function() {\r\n\t\t\tthis.updateCellWidths();\r\n\t\t\tthis.updateRowModel();\r\n\t\t\tthis.options.rowModel.trigger( 'add:cell', this.options.rowModel );\r\n\t\t},\r\n\r\n\t\tupdateRowModel: function() {\r\n\t\t\tthis.options.rowModel.set( 'cells', this );\r\n\t\t\tthis.options.rowModel.trigger( 'change:cells', this.options.rowModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update our cell widths.\r\n\t\t * This is called whenever we add or remove a cell from our cell collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.Model \tcellModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateCellWidths: function( cellModel ) {\r\n\t\t\t// Calculate a new width for our cells.\r\n\t\t\tvar width = Math.round( 100 / this.models.length );\r\n\r\n\t\t\tif ( 100 < width * this.models.length ) {\r\n\t\t\t\twidth = Math.floor( 100 / this.models.length );\r\n\t\t\t}\r\n\r\n\t\t\t// Set our width for each cell.\r\n\t\t\t_.each( this.models, function( cell ) {\r\n\t\t\t\tcell.set( 'width', width );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.sort();\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Model that holds our row information\r\n * \r\n * @package Ninja Forms Layouts\r\n * @subpackage Fields\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/rowModel',['models/cellCollection'], function( CellCollection ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\tthis.options = options;\r\n\t\t\tthis.set( 'cells', new CellCollection( this.get( 'cells' ), { rowModel: this } ) );\r\n\t\t\tthis.on( 'change:cells', this.checkEmptyCells, this );\r\n            this.set( 'order', Number( this.get( 'order' ) ) );\r\n\t\t},\r\n\r\n\t\tcheckEmptyCells: function( model ) {\r\n\t\t\t/*\r\n\t\t\t * Check to see if all our cells are empty. If they are, self destruct.\r\n\t\t\t */\r\n\t\t\tvar remove = true;\r\n\t\t\t_.each( this.get( 'cells' ).models, function( cell ) {\r\n\t\t\t\tif ( 0 != cell.get( 'fields' ).length ) {\r\n\t\t\t\t\tremove = false;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tif ( remove && 'undefined' != typeof this.collection ) {\r\n\t\t\t\tthis.collection.remove( this );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\t\t\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Holds all of our row models.\r\n * \r\n * @package Ninja Forms Layouts\r\n * @subpackage Fields\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/rowCollection',['models/rowModel'], function( rowModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: rowModel,\r\n\t\tcomparator: 'order',\r\n\r\n\t\tinitialize: function( models ) {\r\n\t\t\tthis.updateMaxCols( models );\r\n\t\t\tthis.on( 'add:cell', this.updateMaxCols, this );\r\n\t\t\tthis.on( 'destroy:cell', this.updateMaxCols, this );\r\n\t\t\tthis.on( 'remove:cell', this.updateMaxCols, this );\r\n\t\t\tthis.on( 'destroy', this.updateMaxCols, this );\r\n\t\t\t\r\n\t\t\tthis.on( 'add:field', this.addField, this );\r\n\t\t\tthis.on( 'append:field', this.appendField, this );\r\n\t\t\tthis.on( 'remove:field', this.removeField, this );\r\n\t\t},\r\n\r\n\t\tupdateMaxCols: function( models ) {\r\n\t\t\tvar maxCols = 1;\r\n\t\t\tif ( true === models instanceof Backbone.Model ) {\r\n\t\t\t\tmodels = this.models\r\n\t\t\t}\r\n\t\t\t_.each( models, function( row ) {\r\n\t\t\t\tif ( 'undefined' != typeof row.cells ) {\r\n\t\t\t\t\tif ( maxCols < row.cells.length ) {\r\n\t\t\t\t\t\tmaxCols = row.cells.length;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} else if ( true === row instanceof Backbone.Model ) {\r\n\t\t\t\t\tif ( maxCols < row.get( 'cells' ).length ) {\r\n\t\t\t\t\t\tmaxCols = row.get( 'cells' ).length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t} );\r\n\r\n\t\t\tnfRadio.channel( 'layouts' ).request( 'update:colClass', maxCols );\r\n\t\t},\r\n\r\n\t\taddField: function( fieldModel ) {\r\n\t\t\tif ( ! fieldModel.get( 'oldCellcid' ) ) {\r\n\t\t\t\tthis.appendField( fieldModel );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar cellModel = false;\r\n\t\t\tthis.every( function( rowModel ) {\r\n\t\t\t\tif ( rowModel.get( 'cells' ).get( { cid: fieldModel.get( 'oldCellcid' ) } ) ) {\r\n\t\t\t\t\tcellModel = rowModel.get( 'cells' ).get( { cid: fieldModel.get( 'oldCellcid' ) } );\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} );\r\n\r\n\t\t\tif ( cellModel ) {\r\n\t\t\t\tcellModel.get( 'fields' ).add( fieldModel );\r\n\t\t\t\tcellModel.collection.sort();\r\n\t\t\t} else {\r\n\t\t\t\tthis.appendField( fieldModel );\r\n\t\t\t}\r\n\r\n\t\t\tfieldModel.set( 'oldCellcid', false );\r\n\t\t},\r\n\r\n\t\tremoveField: function( fieldModel ) {\r\n\t\t\tif ( ! fieldModel.get( 'oldCellcid' ) ) {\r\n\t\t\t\tfieldModel.set( 'oldCellcid', fieldModel.get( 'cellcid' ) );\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'layouts-cell' ).trigger( 'remove:field', fieldModel.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\tappendField: function( fieldModel ) {\r\n\t\t\tnfRadio.channel( 'layouts' ).request( 'add:row', this, { field: fieldModel.get( 'key' ) } );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'controllers/data',[ 'models/rowCollection' ], function( RowCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\toverSortable: false,\r\n\t\toutFired: false,\r\n\t\toverCell: false,\r\n\t\toverRows: false,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to add a row to our collection.\r\n\t\t\tnfRadio.channel( 'layouts' ).reply( 'add:row', this.addRow, this );\r\n\t\t},\r\n\r\n\t\taddRow: function( rowCollection, data ) {\r\n\r\n\t\t\tif ( ! rowCollection ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * In the RC for Ninja Forms, 'formContentData' was 'fieldContentsData'.\r\n\t\t\t\t * In 3.0, we changed it to 'formContentData', so this line checks for that old setting name if the new one doesn't exist.\r\n\t\t\t\t * This is for backwards compatibility and can be removed in the future.\r\n\t\t\t\t *\r\n\t\t\t\t * TODO: Remove the || portion of this ternary.\r\n\t\t\t\t */\r\n\t\t\t\trowCollection = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' ) || nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\r\n\t\t\t\tif ( false === rowCollection instanceof RowCollection ) return false;\r\n\t\t\t}\r\n\r\n\t\t\tif ( 'undefined' == typeof data.order || null == data.order ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Get the order of the last item in our row collection.\r\n\t\t\t\t */\r\n\t\t\t\trowOrder = rowCollection.pluck( 'order' );\r\n\t\t\t\tdata.order = ( 0 < rowOrder.length ) ? _.max( rowOrder ) + 1 : 1;\r\n\t\t\t}\r\n\r\n\t\t\tvar rowModel = rowCollection.add( {\r\n\t\t\t\torder: data.order,\r\n\t\t\t\tcells: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\torder: 0,\r\n\t\t\t\t\t\tfields: [ data.field ],\r\n\t\t\t\t\t\twidth: '100'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t} );\r\n\r\n\t\t\treturn rowModel;\r\n\t\t},\r\n\r\n\t\tupdateOverSortable: function( val ) {\r\n\t\t\tthis.overSortable = val;\r\n\t\t},\r\n\r\n\t\tgetOverSortable: function() {\r\n\t\t\treturn this.overSortable;\r\n\t\t},\r\n\r\n\t\tupdateOutFired: function( val ) {\r\n\t\t\tthis.outFired = val;\r\n\t\t},\r\n\r\n\t\tgetOutFired: function() {\r\n\t\t\treturn this.outFired;\r\n\t\t},\r\n\r\n\t\tupdateOverCell: function( val ) {\r\n\t\t\tthis.overCell = val;\r\n\t\t},\r\n\r\n\t\tgetOverCell: function() {\r\n\t\t\treturn this.overCell;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","define( 'controllers/maxCols',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'layouts' ).reply( 'update:colClass', this.updateColClass );\r\n\t\t},\r\n\r\n\t\tupdateColClass: function( num ) {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).removeClass( 'few several many' );\r\n\r\n\t\t\tif ( num == 3 ) {\r\n\t\t\t\tvar builderClass = 'few';\r\n\t\t\t} else if ( num >= 4 && num <= 5 ) {\r\n\t\t\t\tvar builderClass = 'several';\r\n\t\t\t} else if ( num >= 6 ) {\r\n\t\t\t\tvar builderClass = 'many';\r\n\t\t\t} else {\r\n\t\t\t\tvar builderClass = '';\r\n\t\t\t}\r\n\r\n\t\t\tjQuery( builderEl ).addClass( builderClass );\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","define( 'controllers/addField',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tfieldCollection.on( 'add', this.maybeAddRow, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDragging );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDragging );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDragging );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDragging );\r\n\t\t},\r\n\r\n\t\tmaybeAddRow: function( model ) {\r\n            if ( ! model.get( 'cellcid' ) ) {\r\n\t\t\t\tvar order = ( ! model.get( 'order' ) || 999 == model.get( 'order' ) ) ? null : model.get( 'order' );\r\n\t\t\t\tnfRadio.channel( 'layouts' ).request( 'add:row', null, { order: order, field: model } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartDragging: function( ui ) {\r\n\t\t\tjQuery( '.layouts-row' ).addClass( 'dragging' );\r\n\t\t\tjQuery( '#nf-builder' ).addClass( 'layouts-dragging' );\r\n\t\t},\r\n\r\n\t\tstopDragging: function( ui ) {\r\n\t\t\tjQuery( '.layouts-row' ).removeClass( 'dragging' );\r\n\t\t\tjQuery( '#nf-builder' ).removeClass( 'layouts-dragging' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Controller that handles our cell sortable events.\r\n */\r\ndefine( 'controllers/cellSortable',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\t// By default, we aren't dropping on a gutter/divider\r\n\t\tdropping: false,\r\n\t\treceived: false,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our sortable drag helper.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'layouts' ).reply( 'getHelper:cellSortable', this.getHelper, this );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Listen to events triggered by our cell sortables.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'over:cellSortable', this.over );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'out:cellSortable', this.out );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'sort:cellSortable', this.sort );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'start:cellSortable', this.start );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'stop:cellSortable', this.stop );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'update:cellSortable', this.update );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'receive:cellSortable', this.receive );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Listen to triggers that we're dragging a new field type.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'drag:type', this.dragFieldType );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * Listen to requests to set dropping state.\r\n\t\t\t */ \r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'set:dropping', this.setDropping );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * Listen to triggers that we're deleting a cell\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'click:deleteCell', this.deleteCell );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we are over a cell sortable, we need to:\r\n\t\t *\r\n\t\t * 1) Change the width of the helper to match the sortable\r\n\t\t * 2) If a gutter has a placholder class, remove it so that we don't have multiple placeholders\r\n\t\t * 3) If we only have one cell and one field, remove any placeholders in this row.\r\n\t\t * 4) Trigger the Ninja Forms default handler for being over a field sortable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tover: function( e, ui, cellView, sortable ) {\r\n\t\t\t// Change the size of our dragged element.\r\n\t\t\tjQuery( ui.helper ).css( 'width', jQuery( sortable ).css( 'width' ) );\r\n\t\t\t// If we have a gutter with a placeholder class, remove it and add a temporary placeholder.\r\n\t\t\tjQuery( '#nf-main' ).find( '.gutter.nf-fields-sortable-placeholder' ).removeClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t// If we only have one cell and one field, remove any placeholders in this row.\r\n\t\t\tif ( cellView.collection.models.length == 1 && 1 == cellView.cellCollection.length ) {\r\n\t\t\t\tjQuery( sortable ).parent().find( '.nf-fields-sortable-placeholder' ).addClass( 'nf-placeholder-removed' ).removeClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t\tjQuery( sortable ).parent().find( '.nf-placeholder-removed' ).prev().css( 'margin-bottom', '0' );\r\n\t\t\t}\r\n\t\t\t// Trigger Ninja Forms default handler for being over a field sortable.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we move out from a cell sortable, we need to:\r\n\t\t *\r\n\t\t * 1) Trigger the default Ninja Forms handler for mouse out of a sortable.\r\n\t\t * 2) Add the placeholder class back to any we removed in the over method.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tout: function( e, ui, cellView, sortable ) {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\tif ( cellView.collection.models.length == 1 && 1 == cellView.cellCollection.length ) {\r\n\t\t\t\tjQuery( sortable ).parent().find( '.nf-placeholder-removed' ).prev().css( 'margin-bottom', '' );\r\n\t\t\t\tjQuery( sortable ).parent().find( '.nf-placeholder-removed' ).addClass( 'nf-fields-sortable-placeholder' ).removeClass( 'nf-placeholder-removed' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The contents of this method have been commented out because I'm not sure that we need them anymore.\r\n\t\t * This was a fix for a bug that occurred when dragging the staging area. The placeholder would jump\r\n\t\t * out of the target sortable and off-screen. This seems to be fixed in the current version, but I'm leaving\r\n\t\t * this code incase we need to reference it again. It wasn't easy to find.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tsort: function( e, ui, cellView, sortable ) {\r\n\t\t\t// if ( 0 == ui.placeholder.position().left ) {\r\n        \t\t // jQuery( ui.item ).before( ui.placeholder );\r\n        \t// }\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging the sortable items:\r\n\t\t * 1) Set the fieldCollection property to the cellView collection\r\n\t\t * 2) Add a dragging class to our layouts row\r\n\t\t * 3) Add a dragging class to our builder\r\n\t\t * 4) Trigger our Ninja Forms default start for fields sortable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstart: function( e, ui, cellView, sortable ) {\r\n\t\t\tui.item.fieldCollection = cellView.collection;\r\n\t\t\tjQuery( '.layouts-row' ).addClass( 'dragging' );\r\n\t\t\tjQuery( '#nf-builder' ).addClass( 'layouts-dragging' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\r\n\t\t\tif ( this.dropping ) {\r\n\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'set:dropping', false );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging the sortable items:\r\n\t\t * 1) Remove our dragging classes\r\n\t\t * 2) Trigger our Ninja Forms default stop for fields sortable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstop: function( e, ui, cellView, sortable ) {\r\n\t\t\tjQuery( '.layouts-row' ).removeClass( 'dragging' );\r\n\t\t\tjQuery( '#nf-builder' ).removeClass( 'layouts-dragging' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we update, check to make sure that we are dragging a sortable item and not a new field type.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdate: function( e, ui, cellView, sortable ) {\r\n\t\t\t/*\r\n\t\t\t * Both the receive event above and the update event are fired when we drag items from one list to another.\r\n\t\t\t * We only want to fire this event if we are dragging within the same list.\r\n\t\t\t *\r\n\t\t\t * Also, if we're dragging a saved field, make sure that receive is triggered.\r\n\t\t\t */\r\n\t\t\tvar fieldID = jQuery( ui.item ).data( 'id' );\r\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldID );\r\n\r\n\t\t\tif ( 'undefined' !== typeof type && ! this.received ) {\r\n\t\t\t\tthis.receive( e, ui, cellView, sortable );\r\n\t\t\t\tthis.received = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ( sortable === ui.item.parent()[0] && 'undefined' == typeof type ) { // Make sure that we are dragging within the same list\r\n\t\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\r\n\r\n\t\t\t\t// Get our sortable order.\r\n\t\t\t\tvar order = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\t\tvar oldOrder = [];\r\n\t\t\t\t/*\r\n\t\t\t\t * We have to update every model's order based upon our order array.\r\n\t\t\t\t * Loop through all of our fields and update their order value\r\n\t\t\t\t */\r\n\t\t\t\t_.each( cellView.collection.models, function( field ) {\r\n\t\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\r\n\t\t\t\t\t\tvar search = 'field-' + id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar search = id;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\r\n\t\t\t\t\toldOrder[ field.get( 'cellOrder' ) ] = field.get( 'id' );\r\n\t\t\t\t\tfield.set( 'cellOrder', newPos );\r\n\t\t\t\t} );\r\n\t\t\t\t// Sort our field collection.\r\n\t\t\t\tcellView.collection.sort();\r\n\r\n\t\t\t\t// Update our field order attribute\r\n\t\t\t\tnfRadio.channel( 'layouts' ).request( 'update:fieldOrder', cellView.options.cellCollection.options.rowModel.collection );\r\n\r\n\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t\t// Update our preview\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t\t\t// Add our field addition to our change log.\r\n\t\t\t\tvar label = {\r\n\t\t\t\t\tobject: 'Field',\r\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\t\tchange: 'Re-ordered',\r\n\t\t\t\t\tdashicon: 'sort'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar data = {\r\n\t\t\t\t\tlayouts: true,\r\n\t\t\t\t\toldOrder: oldOrder,\r\n\t\t\t\t\tfieldCollection: cellView.collection\r\n\t\t\t\t};\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Disable the next Layouts change\r\n\t\t\t\t */\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this );\r\n\r\n\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'cellSorting', fieldModel, null, label, data );\r\n\t\t\t}\r\n\t\t\tthis.received = false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The 'receive' event fires whenever we drop a new field type, the staging area, or a field from another cell.\r\n\t\t * We need to react to each of these events differently.\r\n\t\t *\r\n\t\t * If we drop a new field type:\r\n\t\t * 1) Add the field to the Ninja Forms field collection.\r\n\t\t * 2) Add the field to our collection.\r\n\t\t * 3) Sort our fields.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceive: function( e, ui, cellView, sortable ) {\r\n\t\t\t/*\r\n\t\t\t * If we are dropping on a gutter, the this.dropping will be set to true.\r\n\t\t\t * Once we know we've dropped, reset dropping to false.\r\n\t\t\t * We only want to receive if we didn't drop on a gutter/divider.\r\n\t\t\t */\r\n\t\t\tif ( this.dropping ) {\r\n\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'set:dropping', false );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // New Field Type Draggable\r\n\t\t\t\tthis.receiveNewField( e, ui, cellView, sortable );\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-field-wrap' ) ) { // An item from another cell sortable.\r\n\t\t\t\tthis.receiveCurrentField( e, ui, cellView, sortable );\r\n\t\t\t} else { // Staging\r\n\t\t\t\tthis.receiveFieldStaging( e, ui, cellView, sortable );\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t// Update our field order attribute\r\n\t\t\tnfRadio.channel( 'layouts' ).request( 'update:fieldOrder', cellView.options.cellCollection.options.rowModel.collection );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t// Update our preview\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t\tthis.received = true;\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires when we drag a new field type into our cell sortable.\r\n\t\t * 1) Adds a new field model\r\n\t\t * 2) Sorts our field collection\r\n\t\t * 3) Removes the helper\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveNewField: function( e, ui, cellView, sortable ) {\r\n\t\t\t// Get our type string\r\n\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t/*\r\n\t\t\t * Add a field.\r\n\t\t\t * Passing the cid of our current cell model causes the field to be added to our cell.\r\n\t\t\t */ \r\n\t\t\tvar newModel = this.addField( type, cellView.model.cid );\r\n\t\t\t/*\r\n\t\t\t * Update our helper id to the tmpID.\r\n\t\t\t * We do this so that when we sort, we have the proper ID.\r\n\t\t\t */ \r\n\t\t\tjQuery( ui.helper ).prop( 'id', newModel.get( 'id' ) );\r\n\t\t\tvar order = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\t// Sort our field collection\r\n\t\t\tthis.sortFields( order, cellView.model.get( 'fields' ) );\r\n\t\t\t// Trigger a drop field type event.\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, newModel );\r\n\t\t\t// Remove the helper. Gets rid of a weird type artifact.\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\tif ( null === ui.helper ) {\r\n\t\t\t\tjQuery( ui.item ).remove();\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * TODO: Add in support for undoing adding a new field.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\t// // Add our field addition to our change log.\r\n\t\t\t// var label = {\r\n\t\t\t// \tobject: 'Field',\r\n\t\t\t// \tlabel: newModel.get( 'label' ),\r\n\t\t\t// \tchange: 'Field Added',\r\n\t\t\t// \tdashicon: 'plus-alt'\r\n\t\t\t// };\r\n\r\n\t\t\t// var data = {\r\n\t\t\t// \tlayouts: true,\r\n\t\t\t// \tfieldCollection: cellView.collection\r\n\t\t\t// };\r\n\t\t\t\r\n\t\t\t// /*\r\n\t\t\t//  * Disable Layouts changes\r\n\t\t\t//  */\r\n\t\t\t// var changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t// _.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t// \tvar data = changeModel.get( 'data' );\r\n\t\t\t// \tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t// \t\tchangeModel.set( 'disabled', true );\r\n\t\t\t// \t}\r\n\t\t\t// }, this );\r\n\r\n\t\t\t// var newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'cellNewField', newModel, null, label, data );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires when we drag the staging area into our cell sortable.\r\n\t\t * 1) Gets our staging field types\r\n\t\t * 2) Adds a new field for each of those types\r\n\t\t * 3) Sort our fields\r\n\t\t * 4) Remove the helper \r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveFieldStaging: function( e, ui, cellView, sortable ) {\r\n\t\t\t// Make sure that our staged fields are sorted properly.\t\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t// Grab our staged fields.\r\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\r\n\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\r\n\t\t\tvar order = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\t// Get the index of our droped element.\r\n\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\r\n\t\t\t// Remove our dropped element from our order array.\r\n\t\t\torder.splice( insertedAt, 1 );\r\n\r\n\t\t\t// Loop through each staged fields model and insert a field.\r\n\t\t\tvar tmpIDs = [];\r\n\t\t\t_.each( stagedFields.models, function( field, index ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Add a field.\r\n\t\t\t\t * Passing the cid of our current cell model causes the field to be added to our cell.\r\n\t\t\t\t */\r\n\t\t\t\tvar newModel = this.addField( field.get( 'slug' ), cellView.model.cid );\r\n\t\t\t\t// Add this newly created field to our order array.\r\n\t\t\t\torder.splice( insertedAt + index, 0, newModel.get( 'id' ) );\r\n\t\t\t}, this );\r\n\r\n\t\t\tthis.sortFields( order, cellView.model.get( 'fields' ) );\r\n\t\t\t// Clear our staging\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\r\n\t\t\t// Remove our helper. Fixes a weird artifact.\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\r\n\t\t\t/**\r\n\t\t\t * TODO: Add in support for undoing adding staged fields.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires when we drag a field from another cell into our cell sortable.\r\n\t\t * 1) Adds the field model to our cell collection\r\n\t\t * 2) Sort our fields\r\n\t\t * 3) Remove the field from the original cell\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveCurrentField: function( e, ui, cellView, sortable ) {\r\n\t\t\t/*\r\n\t\t\t * When we receive an item add it to our collection\r\n\t\t\t */\r\n\t\t\tvar fieldID = jQuery( ui.item ).data( 'id' );\r\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\r\n\r\n\t\t\t/*\r\n\t\t\t * Get the old order of our sending cell\r\n\t\t\t */\r\n\t\t\tvar senderOldOrder = [];\r\n\t\t\t_.each( ui.item.fieldCollection.models, function( field, index ) {\r\n\t\t\t\tsenderOldOrder[ field.get( 'cellOrder' ) ] = field.get( 'id' );\r\n\t\t\t\t// senderOldOrder.push( fieldModel.get( 'cellOrder' ) );\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Get the old order of our receiving cell\r\n\t\t\t */\r\n\t\t\tvar receiverOldOrder = [];\r\n\t\t\t_.each( cellView.collection.models, function( field, index ) {\r\n\t\t\t\treceiverOldOrder[ field.get( 'cellOrder' ) ] = field.get( 'id' );\r\n\t\t\t\t// receiverOldOrder.push( fieldModel.get( 'cellOrder' ) );\r\n\t\t\t} );\r\n\r\n\t\t\tcellView.collection.add( fieldModel, { silent: true } );\r\n\r\n\t\t\tvar order = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\tthis.sortFields( order, cellView.collection );\r\n\r\n\t\t\tui.item.fieldCollection.remove( fieldModel );\r\n\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\tchange: 'Moved Between Cells',\r\n\t\t\t\tdashicon: 'randomize'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\toriginalCollection: ui.item.fieldCollection,\r\n\t\t\t\tnewCollection: cellView.collection,\r\n\t\t\t\tsenderOldOrder: senderOldOrder,\r\n\t\t\t\treceiverOldOrder: receiverOldOrder\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'movedBetweenCells', fieldModel, null, label, data );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sort a fields collection by order.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object order        \t\tarray\r\n\t\t * @param  object collection       \tBackbone collection\r\n\t\t * @return void\r\n\t\t */\r\n\t\tsortFields: function( order, collection ) {\r\n\t\t\t/*\r\n\t\t\t * Loop through our collection and update our order.\r\n\t\t\t */\r\n\t\t\t_.each( collection.models, function( field ) {\r\n\t\t\t\t// Get our current position.\r\n\t\t\t\tvar oldPos = field.get( 'cellOrder' );\r\n\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\tif ( jQuery.isNumeric( id ) ) {\r\n\t\t\t\t\tvar search = 'field-' + id;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar search = id;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\tvar newPos = order.indexOf( search ) + 1;\r\n\t\t\t\tfield.set( 'cellOrder', newPos );\r\n\t\t\t} );\r\n\t\t\t// Sort our field collection.\r\n\t\t\tcollection.sort();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns the sortable drag helper.\r\n\t\t * Places the cursor at the top/left of the draggable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tgetHelper: function( e, cellView, sortable ) {\r\n\t\t\tif ( jQuery( e.target ).hasClass( 'nf-field-label' ) || jQuery( e.target ).hasClass( 'fa' ) ) {\r\n\t\t\t\tvar el = jQuery( e.target ).parent();\r\n\t\t\t} else if ( jQuery( e.target ).hasClass( 'required' ) ) {\r\n\t\t\t\tvar el = jQuery( e.target ).parent().parent();\r\n\t\t\t} else {\r\n\t\t\t\tvar el = e.target;\r\n\t\t\t}\r\n\t\t\tvar width = jQuery( el ).width();\r\n\t\t\tvar height = jQuery( el ).height();\r\n\t\t\tvar element = jQuery( el ).clone();\r\n\t\t\tvar left = width / 4;\r\n\t\t\tvar top = height / 2;\r\n\t\t\tjQuery( sortable ).sortable( 'option', 'cursorAt', { top: top, left: left } );\r\n\t\t\treturn element;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field.\r\n\t\t * Builds the object necessary to add a field to the field model collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \ttype   field type\r\n\t\t * @param  boolean \tsilent add silently\r\n\t\t * @return model \tnewModel\r\n\t\t */\r\n\t\taddField: function( type, cellcid, silent ) {\r\n\t\t\t// Default to false\r\n\t\t\tsilent = silent || false;\r\n\t\t\t// Get our field type model\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \r\n\t\t\t// Get our tmp ID\r\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\r\n\t\t\t// Add our field\r\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type, cellcid: cellcid }, silent, false );\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'cellNewField', newModel, null, label, data );\r\n\r\n\t\t\treturn newModel;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we drag our new field type, make sure that its width stays consistent.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object draggable jQuery UI Object\r\n\t\t * @param  object ui        jQuery UI Object\r\n\t\t * @param  object e         event object\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdragFieldType: function( draggable, ui, e ) {\r\n\t\t\tif ( ui.helper.hasClass( 'nf-field-type-button' ) ) {\r\n\t\t\t\tvar draggableInstance = jQuery( draggable ).draggable( 'instance' );\r\n\t\t\t\tjQuery( ui.helper ).css( 'width', draggableInstance.helperProportions.width );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Listens for the 'set dropping' trigger and sets the value on this view accordingly.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\tsetDropping: function( val ) {\r\n\t\t\tthis.dropping = val;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click \"delete this cell\" in our cell view, remove that cell from its collection\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te        \tevent\r\n\t\t * @param  Backbone.view \tcellView \tBackbone view representing our single cell view\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteCell: function( e, cellView ) {\r\n\t\t\tvar cellModel = cellView.model;\r\n\t\t\tvar cellCollection = cellView.model.collection;\r\n\t\t\tvar rowModel = cellView.model.collection.options.rowModel;\r\n\t\t\tvar rowCollection = rowModel.collection;\r\n\r\n\t\t\t/*\r\n\t\t\t * Remove our cell model from the collection.\r\n\t\t\t */\r\n\t\t\tcellCollection.remove( cellModel );\r\n\r\n\t\t\t/*\r\n\t\t\t * Setup the values to add this to our undo manager\r\n\t\t\t */\r\n\t\t\tvar undoData = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\trowCollection: rowCollection,\r\n\t\t\t\tcellCollection: cellCollection,\r\n\t\t\t\tcellModel: cellModel,\r\n\t\t\t\trowModel: rowModel\r\n\t\t\t};\r\n\r\n\t\t\t/*\r\n\t\t\t * If we have more than one cell, recalculate our widths\r\n\t\t\t */\r\n\t\t\tif ( 1 == cellCollection.models.length ) { // We have one cell.\r\n\t\t\t\t/*\r\n\t\t\t\t * If we have one cell, we want to break any fields inside that cell up into their own rows.\r\n\t\t\t\t */\r\n\t\t\t\t\r\n\t\t\t\t// Get the order of our row\r\n\t\t\t\tvar order = rowModel.get( 'order' );\r\n\t\t\t\t// Store the new rows that we are going to create\r\n\t\t\t\tvar newRows = [];\r\n\t\t\t\t// Create a new row for each field in this cell.\r\n\t\t\t\t_.each( cellCollection.models[0].get( 'fields' ).models, function( fieldModel ) {\r\n\t\t\t\t\tvar newRowModel = nfRadio.channel( 'layouts' ).request( 'add:row', cellCollection.options.rowModel.collection, { order: order, field: fieldModel.get( 'id' ) } );\r\n\t\t\t\t\tnewRows.push( newRowModel );\r\n\t\t\t\t}, this );\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * After we insert our new rows, we remove our old row.\r\n\t\t\t\t */\r\n\t\t\t\trowCollection.remove( rowModel );\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Add our new rows to the undo data object\r\n\t\t\t\t */\r\n\t\t\t\tundoData.newRows = newRows;\r\n\t\t\t}\r\n\r\n\t\t\t// Add our action deletion to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Cell',\r\n\t\t\t\tlabel: '',\r\n\t\t\t\tchange: 'Removed',\r\n\t\t\t\tdashicon: 'dismiss'\r\n\t\t\t};\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removedCell', cellModel, null, label, undoData );\r\n\t\t\t\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t// Update our preview\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Controller that handles events from the gutter/divider droppable\r\n */\r\ndefine( 'controllers/gutterDroppable',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tdropped: false,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Listen for events triggered by our gutter droppables\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'over:gutterDroppable', this.over );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'out:gutterDroppable', this.out );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'drop:gutterDroppable', this.drop );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen to the drag events of our gutter slider.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'dragStart:gutterSlider', this.dragStart );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'drag:gutterSlider', this.drag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'dragEnd:gutterSlider', this.dragEnd );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we're over a gutter droppable:\r\n\t\t * 1) Set our dropped property to false. (Helps prevent duplicate drop events later)\r\n\t\t * 2) Remove any placeholders on other elements.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tover: function( e, ui, rowView, droppable ) {\r\n\t\t\tthis.dropped = false;\r\n\t\t\tif ( jQuery( ui.helper ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tjQuery( ui.helper ).css( 'width', 300 );\r\n\t\t\t\tjQuery( '#nf-main' ).find( '.nf-fields-sortable-placeholder:not(.gutter)' ).addClass( 'nf-sortable-removed' ).removeClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( droppable ).addClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t\tjQuery( '#nf-main' ).find( '.nf-fields-sortable-placeholder:not(.gutter)' ).addClass( 'nf-sortable-removed' ).removeClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we're out of a gutter droppable:\r\n\t\t * 1) Reset any placeholders we removed in the over event.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object e        event\r\n\t\t * @param  object ui       ui object\r\n\t\t * @param  object cellView Backbone view\r\n\t\t * @param  object sortable jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tout: function( e, ui, rowView, droppable ) {\r\n\t\t\tif ( jQuery( ui.helper ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tjQuery( '#nf-main' ).find( '.nf-sortable-removed' ).addClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( droppable ).removeClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t\tjQuery( '#nf-main' ).find( '.nf-sortable-removed' ).addClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * There are three different items that we could be dropping:\r\n\t\t * 1) A new single field type\r\n\t\t * 2) The field staging draggable\r\n\t\t * 3) A field that already exists within another cell.\r\n\t\t *\r\n\t\t * Regardless of which we dropped, we create a new cell and eventually re-render the row.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object e        \tevent\r\n\t\t * @param  object ui       \tui object\r\n\t\t * @param  object rowView \tBackbone view\r\n\t\t * @param  object sortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdrop: function( e, ui, rowView, droppable ) {\r\n\t\t\t/*\r\n\t\t\t * Because this droppable is nested inside a sortable, the drop event can be fired when the user drags over it.\r\n\t\t\t * The solution is to add a check to see when the user has their mousedown.\r\n\t\t\t *\r\n\t\t\t * To further make sure that this only fires once, we set \"dropped\" to false in the over event.\r\n\t\t\t * if \"dropped\" is set to true, we return false.\r\n\t\t\t */\r\n\t\t\tif ( jQuery( '#nf-builder' ).data( 'mousedown' ) || this.dropped ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Prevent this drop event from firing twice from the same drop.\r\n\t\t\tthis.dropped = true;\r\n\r\n\t\t\t// Prevent any sortable lists from accepting this item.\r\n\t\t\tnfRadio.channel( 'layouts' ).trigger( 'set:dropping', true );\r\n\r\n\t\t\t// Get the order of our gutter.\r\n\t\t\tvar order = jQuery( droppable ).index() / 2;\r\n\t\t\t// Create a new cell in our row collection.\r\n\t\t\tvar newCell = this.addCell( order, rowView.collection );\r\n\r\n\t\t\tif ( jQuery( ui.helper ).hasClass( 'nf-field-type-draggable' ) ) { // Single Add New Field Type\r\n\t\t\t\tthis.dropNewField( e, ui, rowView, droppable, newCell );\r\n\t\t\t} else if ( jQuery( ui.helper ).hasClass( 'nf-stage' ) ) { // Field Staging\r\n\t\t\t\tthis.dropFieldStaging( e, ui, rowView, droppable, newCell );\r\n\t\t\t} else { // The field dropped already exists in another cell collection.\r\n\t\t\t\tthis.dropCurrentField( e, ui, rowView, droppable, newCell );\r\n\t\t\t}\r\n\r\n\t\t\t// Update our field order attribute\r\n\t\t\tnfRadio.channel( 'layouts' ).request( 'update:fieldOrder', rowView.model.collection );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t// Update our preview\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t\t// Re-apply our sortable class to any that we removed.\r\n\t\t\tjQuery( '#nf-main' ).find( '.nf-sortable-removed' ).addClass( 'nf-fields-sortable-placeholder' );\r\n\t\t\t// Re-render our row.\r\n\t\t\trowView.render();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our new cell.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te         event\r\n\t\t * @param  object \t\t\tui        jQuery UI element\r\n\t\t * @param  Backbone.view \trowView   Single Row View\r\n\t\t * @param  object \t\t\tdroppable jQuery UI element\r\n\t\t * @param  Backbone.model \tnewCell   cell model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdropNewField: function( e, ui, rowView, droppable, newCell ) {\r\n\t\t\t// Get our type string\r\n\t\t\tvar type = jQuery( ui.draggable ).data( 'id' );\r\n\t\t\t// Add a field (returns the tmp ID )\r\n\t\t\tvar newModel = this.addField( type, newCell, false );\r\n\t\t\t// Remove our dragged element.\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\r\n\t\t\t// // Add our field addition to our change log.\r\n\t\t\t// var label = {\r\n\t\t\t// \tobject: 'Field / Cell',\r\n\t\t\t// \tlabel: newModel.get( 'label' ),\r\n\t\t\t// \tchange: 'Added',\r\n\t\t\t// \tdashicon: 'plus-alt'\r\n\t\t\t// };\r\n\r\n\t\t\t// var data = {\r\n\t\t\t// \tlayouts: true,\r\n\t\t\t// \tfieldCollection: nfRadio.channel( 'fields' ).request( 'get:collection' ),\r\n\t\t\t// \tnewCell: newCell,\r\n\t\t\t// };\r\n\r\n\t\t\t// /*\r\n\t\t\t//  * Disable Layouts changes\r\n\t\t\t//  */\r\n\t\t\t// var changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t// _.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t// \tvar data = changeModel.get( 'data' );\r\n\t\t\t// \tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t// \t\tchangeModel.set( 'disabled', true );\r\n\t\t\t// \t}\r\n\t\t\t// }, this );\r\n\r\n\t\t\t// nfRadio.channel( 'changes' ).request( 'register:change', 'gutterDropNewField', newModel, null, label, data );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our new cell for each item in our staging area.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te         event\r\n\t\t * @param  object \t\t\tui        jQuery UI element\r\n\t\t * @param  Backbone.view \trowView   Single Row View\r\n\t\t * @param  object \t\t\tdroppable jQuery UI element\r\n\t\t * @param  Backbone.model \tnewCell   cell model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdropFieldStaging: function( e, ui, rowView, droppable, newCell ) {\r\n\t\t\t// Make sure that our staged fields are sorted properly.\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\r\n\t\t\t// Grab our staged fields.\r\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\r\n\t\t\t// Loop through each staged fields model and insert a field.\r\n\t\t\tvar tmpIDs = [];\r\n\t\t\t_.each( stagedFields.models, function( field, index ) {\r\n\t\t\t\t// Add our field.\r\n\t\t\t\tvar newModel = this.addField( field.get( 'slug' ), newCell );\r\n\t\t\t}, this );\r\n\r\n\t\t\t// Clear our staging\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\r\n\t\t\t// Remove our helper. Fixes a weird artifact.\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Copy a field to our new cell that already exists on the form.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te         event\r\n\t\t * @param  object \t\t\tui        jQuery UI element\r\n\t\t * @param  Backbone.view \trowView   Single Row View\r\n\t\t * @param  object \t\t\tdroppable jQuery UI element\r\n\t\t * @param  Backbone.model \tnewCell   cell model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdropCurrentField: function( e, ui, rowView, droppable, newCell ) {\r\n\t\t\t// Get our field id.\r\n\t\t\tvar fieldID = jQuery( ui.draggable ).data( 'id' );\r\n\t\t\t// Get our field model from the ID\r\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\r\n\t\t\tvar oldCollection = ui.draggable.fieldCollection;\r\n\t\t\t// Add our field to our new cell model\r\n\t\t\tnewCell.get( 'fields' ).add( fieldModel );\r\n\t\t\t// Remove our field from its old cell model.\r\n\t\t\tui.draggable.fieldCollection.remove( fieldModel );\r\n\t\t\t// Remove the element that was originally dragged. Keep the helper.\r\n\t\t\tjQuery( ui.draggable ).remove();\r\n\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\tchange: 'New Cell',\r\n\t\t\t\tdashicon: 'image-flip-horizontal'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\toldCollection: oldCollection,\r\n\t\t\t\tnewCell: newCell,\r\n\t\t\t\tcellCollection: rowView.collection,\r\n\t\t\t};\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tvar changeModel = nfRadio.channel( 'changes' ).request( 'register:change', 'gutterSplitCell', fieldModel, null, label, data );\r\n\t\t},\r\n\r\n\t\tdragStart: function( data, cellCollection ) {\r\n\t\t\tvar widths = this.getDraggedWidths( data, cellCollection );\r\n\t\t\tvar percentLeft = widths.a;\r\n\t\t\tvar percentRight = widths.b;\r\n\r\n\t\t\tjQuery( data.gutter ).append( '<span class=\"percent-left\">' + percentLeft + '%</span><span class=\"percent-right\">' + percentRight + '%</span>' );\r\n\t\t},\r\n\r\n\t\tdrag: function( data, cellCollection ) {\r\n\t\t\tvar widths = this.getDraggedWidths( data, cellCollection );\r\n\t\t\tvar percentLeft = widths.a;\r\n\t\t\tvar percentRight = widths.b;\r\n\r\n\t\t\tjQuery( data.gutter ).find( '.percent-left' ).html( percentLeft + '%' );\r\n\t\t\tjQuery( data.gutter ).find( '.percent-right' ).html( percentRight + '%' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we resize our cell, update the data model.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  object \tdata Split.js data object\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdragEnd: function( data, cellCollection ) {\r\n\t\t\tvar widths = this.getDraggedWidths( data, cellCollection );\r\n\t\t\tvar awidth = widths.a;\r\n\t\t\tvar bwidth = widths.b;\r\n\r\n\t\t\t// Get our data models.\r\n\t\t\tvar modelA = jQuery( data.a ).data( 'model' );\r\n\t\t\tvar modelB = jQuery( data.b ).data( 'model' );\r\n\r\n\t\t\tvar oldModelAWidth = modelA.get( 'width' );\r\n\t\t\tvar oldModelBWidth = modelB.get( 'width' );\r\n\r\n\t\t\tjQuery( data.gutter ).find( '.percent-left' ).remove();\r\n\t\t\tjQuery( data.gutter ).find( '.percent-right' ).remove();\r\n\r\n\t\t\tif ( oldModelAWidth == awidth && oldModelBWidth == bwidth ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Update our width\r\n\t\t\tmodelA.set( 'width', awidth );\r\n\t\t\tmodelB.set( 'width', bwidth );\r\n\r\n\t\t\t/*\r\n\t\t\t * Add our field addition to our change log.\r\n\t\t\t */\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Cells',\r\n\t\t\t\tlabel: '',\r\n\t\t\t\tchange: 'Resized',\r\n\t\t\t\tdashicon: 'editor-code'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\tgutter: data.gutter,\r\n\t\t\t\tcellCollection: cellCollection,\r\n\t\t\t\tmodelA: modelA,\r\n\t\t\t\toldModelAWidth: oldModelAWidth,\r\n\t\t\t\tmodelB: modelB,\r\n\t\t\t\toldModelBWidth: oldModelBWidth\r\n\t\t\t};\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'gutterResize', modelA, null, label, data );\r\n\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t// Update our preview\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field.\r\n\t\t * Builds the object necessary to add a field to the field model collection.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\t\ttype   \t\tfield type\r\n\t\t * @param  Backbone.object   \tnewCell \tthe cell this field lives in\r\n\t\t * @param  boolean \t\t\t\tsilent \t\tadd silently\r\n\t\t * @return model \t\t\t\tnewModel\r\n\t\t */\r\n\t\taddField: function( type, newCell, silent ) {\r\n\t\t\t// Default to false\r\n\t\t\tsilent = silent || false;\r\n\t\t\trenderField = false;\r\n\t\t\t// Get our field type model\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t// Get our tmp ID\r\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\r\n\t\t\t// Add our field\r\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type, cellcid: newCell.cid }, silent, renderField );\r\n\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field / Cell',\r\n\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\tfieldCollection: nfRadio.channel( 'fields' ).request( 'get:collection' ),\r\n\t\t\t\tnewCell: newCell\r\n\t\t\t};\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'gutterDropNewField', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\treturn newModel;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a cell to the passed collection.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  int \t\t\t\t\torder      \tOrder for our new cell in the row\r\n\t\t * @param  Backbone.collection \tcollection \tCell collection\r\n\t\t * @param  array \t\t\t\tfields     \tOptional array of fields to add to the cell.\r\n\t\t * @return Backbone.model \t\tnewCell \tNew cell model\r\n\t\t */\r\n\t\taddCell: function( order, collection, fields ) {\r\n\t\t\tvar fields = fields || [];\r\n\t\t\t// Update any cells that have an order equal to or higher than our order.\r\n\t\t\t_.each( collection.models, function( cell ) {\r\n\t\t\t\tif ( cell.get( 'order' ) >= order ) {\r\n\t\t\t\t\tcell.set( 'order', cell.get( 'order' ) + 1 );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\t// Add a new cell to our cell collection.\r\n\t\t\tvar newCell = collection.add( {\r\n\t\t\t\torder: order,\r\n\t\t\t\tfields: fields,\r\n\t\t\t\twidth: ''\r\n\t\t\t} );\r\n\r\n\t\t\t// collection.sort();\r\n\r\n\t\t\treturn newCell;\r\n\t\t},\r\n\r\n\t\tgetDraggedWidths: function( data, cellCollection ) {\r\n\t\t\t// Get the widths of the cell to the left and right of the dragged gutter.\r\n\t\t\tvar awidth = jQuery( data.a ).data( 'width' );\r\n\t\t\tvar bwidth = jQuery( data.b ).data( 'width' );\r\n\r\n\t\t\treturn {\r\n\t\t\t\ta: awidth,\r\n\t\t\t\tb: bwidth,\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Controller that handles row collection sortables.\r\n */\r\ndefine( 'controllers/rowsSortable',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tdropping: false,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Listen for events from our row collection sortable.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'over:rowsSortable', this.over );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'out:rowsSortable', this.out );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'start:rowsSortable', this.start );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'stop:rowsSortable', this.stop );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'update:rowsSortable', this.update );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'receive:rowsSortable', this.receive );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Listen to our set dropping trigger\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'layouts' ), 'set:dropping', this.setDropping );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging, set our dropping value to false and fire the default Ninja Forms event.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te \t\t \tevent object\r\n\t\t * @param  object \t\t\tui       \tjQuery UI element\r\n\t\t * @param  Backbone.view \trowsView \tBackbone view\r\n\t\t * @param  object \t\t\tsortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstart: function( e, ui, rowsView, sortable ) {\r\n\t\t\tif ( this.dropping ) {\r\n\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'set:dropping', false );\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we drag over our sortable, set our helper width and fire the default Ninja Forms event.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te \t\t \tevent object\r\n\t\t * @param  object \t\t\tui       \tjQuery UI element\r\n\t\t * @param  Backbone.view \trowsView \tBackbone view\r\n\t\t * @param  object \t\t\tsortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tover: function( e, ui, rowsView, sortable ) {\r\n\t\t\tjQuery( ui.helper ).css( 'width', jQuery( sortable ).css( 'width' ) );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we drag out of our sortable, fire the default Ninja Forms event.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te \t\t \tevent object\r\n\t\t * @param  object \t\t\tui       \tjQuery UI element\r\n\t\t * @param  Backbone.view \trowsView \tBackbone view\r\n\t\t * @param  object \t\t\tsortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tout: function( e, ui, rowsView, sortable ) {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging our sortable, fire the default Ninja Forms event.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te \t\t \tevent object\r\n\t\t * @param  object \t\t\tui       \tjQuery UI element\r\n\t\t * @param  Backbone.view \trowsView \tBackbone view\r\n\t\t * @param  object \t\t\tsortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstop: function( e, ui, rowsView, sortable ) {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we update the order of our sortable update the order of the models in our collection.\r\n\t\t * We only want to update if the user didn't drop on a gutter/divider.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te \t\t \tevent object\r\n\t\t * @param  object \t\t\tui       \tjQuery UI element\r\n\t\t * @param  Backbone.view \trowsView \tBackbone view\r\n\t\t * @param  object \t\t\tsortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdate: function( e, ui, rowsView, sortable ) {\r\n\t\t\t// Make sure that we're dropping a field and that we aren't dropping on a gutter/divider\r\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-stage' ) && ! jQuery( ui.item ).hasClass( 'nf-field-wrap' ) && ! this.dropping ) {\r\n\t\t\t\tvar order = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\t\tvar oldOrder = [];\r\n\t\t\t\t// var rowCollection = nfRadio.channel( 'layouts-row' ).request( 'get:collection' );\r\n\t\t\t\t_.each( order, function( cid, index ) {\r\n\t\t\t\t\toldOrder[ rowsView.collection.get( { cid: cid } ).get( 'order' ) ] = cid;\r\n\t\t\t\t\trowsView.collection.get( { cid: cid } ).set( 'order', index + 1 );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\trowsView.collection.sort();\r\n\r\n\t\t\t\t// Update our field order attribute\r\n\t\t\t\tnfRadio.channel( 'layouts' ).request( 'update:fieldOrder', rowsView.collection );\r\n\r\n\t\t\t\tvar rowcid = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\tvar droppedRow = rowsView.collection.get( { cid: rowcid } );\r\n\r\n\t\t\t\t// Add our field addition to our change log.\r\n\t\t\t\tvar label = {\r\n\t\t\t\t\tobject: 'Row',\r\n\t\t\t\t\tlabel: '',\r\n\t\t\t\t\tchange: 'Re-ordered',\r\n\t\t\t\t\tdashicon: 'sort'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar data = {\r\n\t\t\t\t\tlayouts: true,\r\n\t\t\t\t\toldOrder: oldOrder,\r\n\t\t\t\t\trowCollection: rowsView.collection\r\n\t\t\t\t};\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Disable the next Layouts change\r\n\t\t\t\t */\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this );\r\n\r\n\t\t\t\tvar newChange = nfRadio.channel( 'changes' ).request( 'register:change', 'rowSorting', droppedRow, null, label, data );\r\n\r\n\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t\t// Update our preview\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we receive an element, we are receiving:\r\n\t\t * 1) A field from cell sortable\r\n\t\t * 2) A single new field type\r\n\t\t * 3) Or the fields staging.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object \t\t\te \t\t \tevent object\r\n\t\t * @param  object \t\t\tui       \tjQuery UI element\r\n\t\t * @param  Backbone.view \trowsView \tBackbone view\r\n\t\t * @param  object \t\t\tsortable \tjQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceive: function( e, ui, rowsView, sortable ) {\r\n\t\t\t/*\r\n\t\t\t * If we are dropping on a gutter, the this.dropping will be set to true.\r\n\t\t\t * Once we know we've dropped, reset dropping to false.\r\n\t\t\t * We only want to receive if we didn't drop on a gutter/divider.\r\n\t\t\t */\r\n\t\t\tif ( this.dropping ) {\r\n\t\t\t\tnfRadio.channel( 'layouts' ).trigger( 'set:dropping', false );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-wrap' ) ) { // Receiving an item from a cell sortable\r\n\t\t\t\tthis.receiveCurrentField( e, ui, rowsView, sortable );\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // We've received a field type button\r\n\t\t\t\tthis.receiveNewField( e, ui, rowsView, sortable );\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\tthis.receiveFieldStaging( e, ui, rowsView, sortable );\r\n\t\t\t}\r\n\t\t\t// Update our field order attribute\r\n\t\t\tnfRadio.channel( 'layouts' ).request( 'update:fieldOrder', rowsView.collection );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t// Update our preview\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t},\r\n\r\n\t\treceiveNewField: function( e, ui, rowsView, sortable ) {\r\n\t\t\t// Get the location where we've dropped the item.\t\r\n\t\t\tvar order = ui.helper.index() + 1;\r\n\t\t\t// Get our type string\r\n\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t// Add a new field for our type, returning its tmp id.\r\n\t\t\tvar fieldModel = this.addField( type, order, true );\r\n\r\n\t\t\tthis.addRow( order, rowsView.collection, [ fieldModel.get( 'key' ) ], true );\r\n\t\t\t// Remove our helper\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tlayouts: true,\r\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tvar changeModel = nfRadio.channel( 'changes' ).request( 'register:change', 'rowNewField', fieldModel, null, label, data );\r\n\t\t},\r\n\r\n\t\treceiveFieldStaging: function( e, ui, rowsView, sortable ) {\r\n\t\t\t// Get the location where we've dropped the item.\t\r\n\t\t\tvar order = ui.helper.index() + 1;\r\n\t\t\t// Make sure that our staged fields are sorted properly.\t\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t// Grab our staged fields.\r\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\t\r\n\t\t\t// Loop through each staged fields model and insert a field.\r\n\t\t\t_.each( stagedFields.models, function( field, index ) {\r\n\t\t\t\t// Add a new field for our type, returning its tmp id.\r\n\t\t\t\tvar fieldModel = this.addField( field.get( 'slug' ), order, true );\r\n\t\t\t\tthis.addRow( order, rowsView.collection, [ fieldModel.get( 'id' ) ] );\r\n\t\t\t\torder++;\r\n\t\t\t}, this );\r\n\r\n\t\t\t// Clear our staging\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\r\n\t\t\t// Remove our helper. Fixes a weird artifact.\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t},\r\n\r\n\t\treceiveCurrentField: function( e, ui, rowsView, sortable ) {\r\n\t\t\tvar oldCID = ui.item.fieldCollection.options.cellModel.collection.options.rowModel.cid;\r\n\t\t\tvar prevOrder = ui.item.fieldCollection.options.cellModel.collection.options.rowModel.get( 'order' );\t\t\r\n\t\t\tvar droppedOrder = ( prevOrder < jQuery( ui.item ).index() ) ? jQuery( ui.item ).index() : jQuery( ui.item ).index() + 1;\r\n\t\t\tvar fieldID = jQuery( ui.item ).data( 'id' );\r\n\r\n\t\t\tvar oldOrder = [];\r\n\t\t\t// Update any rows that have an order equal to or higher than our order.\r\n\t\t\t_.each( rowsView.collection.models, function( rowModel ) {\r\n\t\t\t\toldOrder[ rowModel.get( 'order') ] = rowModel.cid;\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Remove the field from its collection.\r\n\t\t\t * This will bubble up, causing the row to remove itself as well.\r\n\t\t\t */\r\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', fieldID );\r\n\t\t\tui.item.fieldCollection.remove( fieldModel );\r\n\r\n\t\t\trowsView.collection.each( function( model, index ) {\r\n\t\t\t\tmodel.set( 'order', index + 1 );\r\n\t\t\t} );\r\n\r\n\t\t\tvar rowModel = this.addRow( droppedOrder, rowsView.collection, [ fieldID ] );\r\n\r\n\t\t\toldOrder[ oldOrder.indexOf( oldCID ) ] = rowModel.cid;\r\n\r\n\t\t\t/*\r\n\t\t\t * Register an undo action for moving a current field into the row sortable.\r\n\t\t\t */\r\n\t\t\tvar undoLabel = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tundoLabel: fieldModel.get( 'label' )\r\n\t\t\t};\r\n\r\n\t\t\tvar undoData = {\r\n\t\t\t\tlayouts: true\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\t/*\r\n\t\t\t * If we have more than one cell model in our collection, then we've dragged from a cell into a row.\r\n\t\t\t *\r\n\t\t\t * If we have just one cell model in our collection, then we've dragged a row.\r\n\t\t\t * In this case, we are technically sorting, not just adding a new row.\r\n\t\t\t */\r\n\t\t\tif ( 2 <= ui.item.fieldCollection.options.cellModel.collection.length ) {\r\n\t\t\t\tvar changeAction = 'movedToNewRow';\r\n\t\t\t\tvar actionModel = fieldModel;\r\n\t\t\t\tundoData.originalCollection = ui.item.fieldCollection;\r\n\t\t\t\tundoData.rowModel = rowModel;\r\n\t\t\t\tundoLabel.dashicon = 'randomize';\r\n\t\t\t\tundoLabel.change = 'Moved';\r\n\t\t\t} else {\r\n\t\t\t\tvar changeAction = 'rowSorting';\r\n\t\t\t\tvar actionModel = rowModel;\r\n\t\t\t\tundoData.oldOrder = oldOrder;\r\n\t\t\t\tundoData.rowCollection = rowsView.collection;\r\n\t\t\t\tundoLabel.dashicon = 'sort';\r\n\t\t\t\tundoLabel.change = 'Re-ordered';\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Disable Layouts changes\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', true );\r\n\r\n\t\t\t\t\tif ( 'undefined' != typeof data.oldOrder ) {\r\n\t\t\t\t\t\tdata.oldOrder[ data.oldOrder.indexOf( oldCID ) ] = rowModel.cid;\r\n\t\t\t\t\t\tchangeModel.set( 'data', data );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\tvar changeModel = nfRadio.channel( 'changes' ).request( 'register:change', changeAction, actionModel, null, undoLabel, undoData );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a row to the passed row collection.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param int \t\t\t\t\torder      Index of the dropped item\r\n\t\t * @param Backbone.collection \tcollection Row collection\r\n\t\t * @param array \t\t\t\tfields  IDs of the fields we're adding (optional)\r\n\t\t * @param bool \t\t\t\t\tsilent     [description]\r\n\t\t */\r\n\t\taddRow: function( order, collection, fields, silent ) {\r\n\t\t\tvar fields = fields || [];\r\n\t\t\tvar silent = silent || false;\r\n\r\n\t\t\t// Update any rows that have an order equal to or higher than our order.\r\n\t\t\t_.each( collection.models, function( rowModel ) {\r\n\t\t\t\tif ( parseInt( rowModel.get( 'order' ) ) >= order ) {\r\n\t\t\t\t\tvar newOrder = rowModel.get( 'order' ) + 1;\r\n\t\t\t\t\trowModel.set( 'order', newOrder );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\t// Add a row model into our collection.\r\n\t\t\tvar newRow = collection.add( {\r\n\t\t\t\torder: order,\r\n\t\t\t\tcells: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\torder: 0,\r\n\t\t\t\t\t\tfields: fields,\r\n\t\t\t\t\t\twidth: '100'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}, { silent: silent } );\r\n\r\n\t\t\t\r\n\t\t\tcollection.sort( { silent: true } );\r\n\r\n\t\t\t/* \r\n\t\t\t * When we add a row to our collection, the order attributes might get askew: 1,3,7 etc.\r\n\t\t\t * Update our order so that all of our numbers are consecutive.\r\n\t\t\t */\r\n\t\t\t_.each( collection.models, function( rowModel, index ) {\r\n\t\t\t\trowModel.set( 'order', index + 1 );\r\n\t\t\t} );\r\n\r\n\t\t\tcollection.sort();\r\n\t\t\r\n\t\t\treturn newRow;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field.\r\n\t\t * Builds the object necessary to add a field to the field model collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \ttype   field type\r\n\t\t * @param  boolean \tsilent add silently\r\n\t\t * @return string \ttmpID\r\n\t\t */\r\n\t\taddField: function( type, order, silent ) {\r\n\t\t\t// Default to false\r\n\t\t\tsilent = silent || false;\r\n\t\t\t// Get our field type model\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \r\n\t\t\t// Add our field\r\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { label: fieldType.get( 'nicename' ), type: type }, silent, false );\r\n\t\t\treturn newModel;\r\n\t\t},\r\n\r\n\t\tsetDropping: function( val ) {\r\n\t\t\tthis.dropping = val;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Listen and respond to undo events.\r\n */\r\ndefine( 'controllers/undo',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:movedBetweenCells', this.undoMovedBetweenCells, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:gutterDropNewField', this.undoGutterDropNewField, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:gutterSplitCell', this.undoGutterSplitCell, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:cellSorting', this.undoCellSorting, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removedCell', this.undoRemovedCell, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:cellNewField', this.undoCellNewField, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:rowNewField', this.undoRowNewField, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:gutterResize', this.undoGutterResize, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:movedToNewRow', this.undoMovedToNewRow, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:rowSorting', this.undoRowSorting, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo moving a field between cells.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.model \tchange  change model\r\n\t\t * @param  bool \t\t\tundoAll are we undoing everything?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoMovedBetweenCells: function( change, undoAll ) {\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar senderOldOrder = change.get( 'data' ).senderOldOrder;\r\n\t\t\tvar receiverOldOrder = change.get( 'data' ).receiverOldOrder;\r\n\t\t\t\r\n\t\t\tvar originalCollection = change.get( 'data' ).originalCollection;\r\n\t\t\tvar newCollection = change.get( 'data' ).newCollection;\r\n\t\t\t\r\n\t\t\toriginalCollection.add( fieldModel );\r\n\t\t\t/*\r\n\t\t\t * We have to update every model's order based upon our order array.\r\n\t\t\t * Loop through all of our fields and update their order value\r\n\t\t\t */\r\n\t\t\t_.each( originalCollection.models, function( field ) {\r\n\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\tvar newPos = senderOldOrder.indexOf( id );\r\n\t\t\t\tfield.set( 'cellOrder', newPos );\r\n\t\t\t} );\r\n\r\n\t\t\toriginalCollection.sort();\r\n\r\n\t\t\tnewCollection.remove( fieldModel );\r\n\r\n\t\t\t/*\r\n\t\t\t * We have to update every model's order based upon our order array.\r\n\t\t\t * Loop through all of our fields and update their order value\r\n\t\t\t */\r\n\t\t\t_.each( newCollection.models, function( field ) {\r\n\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\tvar newPos = receiverOldOrder.indexOf( id );\r\n\t\t\t\tfield.set( 'cellOrder', newPos );\r\n\t\t\t} );\r\n\r\n\t\t\tnewCollection.sort();\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo dropping a new field type onto our gutter/divider\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.model \tchange  change model\r\n\t\t * @param  bool \t\t\tundoAll are we undoing everything?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoGutterDropNewField: function( change, undoAll ) {\r\n\t\t\t// Remove our new field\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar fieldCollection = change.get( 'data' ).fieldCollection;\r\n\t\t\tvar newCell = change.get( 'data' ).newCell;\r\n\r\n\t\t\tfieldCollection.remove( fieldModel );\r\n\t\t\t// Remove our new cell if we don't have any fields left\r\n\t\t\tif ( 0 == newCell.get( 'fields' ).models.length ) {\r\n\t\t\t\tnewCell.collection.remove( newCell );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo dropping an existing field onto a gutter and adding a new cell.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.model \tchange  change model\r\n\t\t * @param  bool \t\t\tundoAll are we undoing everything?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoGutterSplitCell: function( change, undoAll ) {\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar oldCollection = change.get( 'data' ).oldCollection;\r\n\t\t\tvar newCell = change.get( 'data' ).newCell;\r\n\t\t\tvar cellCollection = change.get( 'data' ).cellCollection;\r\n\r\n\t\t\t/*\r\n\t\t\t * Check to see if this was the only item in a row.\r\n\t\t\t * If it was, we need to insert a new row.\r\n\t\t\t */\r\n\t\t\tif( 'undefined' == typeof oldCollection.options.cellModel.collection.options.rowModel.collection ) {\r\n\t\t\t\tvar order = oldCollection.options.cellModel.collection.options.rowModel.get( 'order' );\r\n\t\t\t\tvar newRowModel = nfRadio.channel( 'layouts' ).request( 'add:row', cellCollection.options.rowModel.collection, { order: order, field: fieldModel.get( 'id' ) } );\r\n\t\t\t} else { // We can just add the field back to it's original collection because a row already exists.\r\n\t\t\t\toldCollection.add( fieldModel );\r\n\t\t\t}\r\n\r\n\t\t\t// Remove our new cell\r\n\t\t\tnewCell.get( 'fields' ).remove( fieldModel );\r\n\t\t\tcellCollection.remove( newCell )\r\n\t\t\tcellCollection.sort();\t\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tundoCellSorting: function( change, undoAll ) {\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar fieldCollection = data.fieldCollection;\r\n\t\t\tvar order = data.oldOrder;\r\n\r\n\t\t\t/*\r\n\t\t\t * We have to update every model's order based upon our order array.\r\n\t\t\t * Loop through all of our fields and update their order value\r\n\t\t\t */\r\n\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\tvar newPos = order.indexOf( id );\r\n\t\t\t\tfield.set( 'cellOrder', newPos );\r\n\t\t\t} );\r\n\r\n\t\t\tfieldCollection.sort();\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tundoRemovedCell: function( change, undoAll ) {\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar cellModel = data.cellModel;\r\n\t\t\tvar cellCollection = data.cellCollection;\r\n\t\t\tvar rowModel = data.rowModel;\r\n\t\t\tvar rowCollection = data.rowCollection;\r\n\r\n\t\t\t/*\r\n\t\t\t * Put the cell back into our cell collection.\r\n\t\t\t */\r\n\t\t\tcellCollection.add( cellModel );\r\n\r\n\t\t\t/*\r\n\t\t\t * If we don't have a data.newRows property, then we didn't create new rows as a result of our cell removal.\r\n\t\t\t */\r\n\t\t\tif ( 'undefined' != typeof data.newRows ) { // We removed a cell that resulted in creating a bunch of new rows.\r\n\t\t\t\tvar newRows = data.newRows;\r\n\t\t\t\t// Remove our old rows\r\n\t\t\t\trowCollection.remove( newRows );\r\n\t\t\t\t// Re-add our row model that was removed.\r\n\t\t\t\trowCollection.add( rowModel );\r\n\t\t\t}\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tundoCellNewField: function( change, undoAll ) {\r\n\t\t\t// Remove our new field\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar fieldCollection = change.get( 'data' ).collection;\r\n\t\t\tfieldCollection.remove( fieldModel );\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tundoRowNewField: function( change, undoAll ) {\r\n\t\t\t// Remove our new field\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar fieldCollection = change.get( 'data' ).collection;\r\n\t\t\tfieldCollection.remove( fieldModel );\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tundoGutterResize: function( change, undoAll ) {\r\n\t\t\t// Reset our sizes\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar gutter = data.gutter; \r\n\t\t\tvar cellCollection = data.cellCollection;\r\n\t\t\tvar modelA = data.modelA;\r\n\t\t\tvar modelB = data.modelB;\r\n\r\n\t\t\tvar oldModelAWidth = data.oldModelAWidth;\r\n\t\t\tvar oldModelBWidth = data.oldModelBWidth;\r\n\r\n\t\t\tmodelA.set( 'width', oldModelAWidth );\r\n\t\t\tmodelB.set( 'width', oldModelBWidth );\r\n\r\n\t\t\tjQuery( gutter ).find( '.percent-left' ).remove();\r\n\t\t\tjQuery( gutter ).find( '.percent-right' ).remove();\r\n\r\n\t\t\tcellCollection.sort();\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\r\n\t\t},\r\n\r\n\t\tundoMovedToNewRow: function( change, undoAll ) {\r\n\t\t\t/*\r\n\t\t\t * Move the field back to its original cell.\r\n\t\t\t */\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar originalCollection = change.get( 'data' ).originalCollection;\r\n\t\t\toriginalCollection.add( fieldModel );\r\n\r\n\t\t\t/*\r\n\t\t\t * Remove our new row model\r\n\t\t\t */\r\n\t\t\tvar rowModel = change.get( 'data' ).rowModel;\r\n\t\t\trowModel.collection.remove( rowModel );\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tundoRowSorting: function( change, undoAll ) {\r\n\t\t\tvar oldOrder = change.get( 'data' ).oldOrder;\r\n\t\t\tvar rowCollection = change.get( 'data' ).rowCollection;\r\n\r\n\t\t\t/*\r\n\t\t\t * We have to update every model's order based upon our order array.\r\n\t\t\t * Loop through all of our fields and update their order value\r\n\t\t\t */\r\n\t\t\t_.each( rowCollection.models, function( rowModel ) {\r\n\t\t\t\tvar cid = rowModel.cid;\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\tvar newPos = oldOrder.indexOf( cid );\r\n\t\t\t\trowModel.set( 'order', newPos );\r\n\t\t\t} );\r\n\r\n\t\t\trowCollection.sort();\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tthis.enableNextChange();\r\n\t\t},\r\n\r\n\t\tenableNextChange: function() {\r\n\t\t\t/*\r\n\t\t\t * Enable the next Layouts change\r\n\t\t\t */\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tvar found = false;\r\n\t\t\t_.each( changeCollection.models, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( ! found && 'undefined' != typeof data.layouts && data.layouts ) {\r\n\t\t\t\t\tchangeModel.set( 'disabled', false );\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\r\n\t\t * @return void\r\n\t\t */\r\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\r\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\t// Update preview.\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tchangeCollection.remove( change );\r\n\t\t\t\tif ( 0 == changeCollection.length ) {\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Recalculates our field order attribute.\r\n * This isn't the attribute used by Layouts but the one used by core.\r\n *\r\n * @since  3.0\r\n */ \r\ndefine( 'controllers/updateFieldOrder',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'layouts' ).reply( 'update:fieldOrder', this.updateFieldOrder );\r\n\t\t},\r\n\r\n\t\tupdateFieldOrder: function( rowCollection ) {\r\n\t\t\tvar order = 1;\r\n\t\t\t/*\r\n\t\t\t * Loop over our row collection and set the order attribute for any fields we find inside the cells.\r\n\t\t\t */\r\n\t\t\t_.each( rowCollection.models, function( rowModel, rowIndex ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Loop over our cells and update our field models 'order' attribute.\r\n\t\t\t\t */\r\n\t\t\t\t_.each( rowModel.get( 'cells' ).models, function( cellModel, cellIndex ) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * Loop over every field in our cell model and update its 'order' attribute.\r\n\t\t\t\t\t */\r\n\t\t\t\t\t_.each( cellModel.get( 'fields' ).models, function( fieldModel, fieldIndex ) {\r\n\t\t\t\t\t\tfieldModel.set( 'order', order, { silent: true } );\r\n\t\t\t\t\t\torder++;\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","define( \r\n\t'controllers/loadControllers',[\r\n\t\t'controllers/data',\r\n\t\t'controllers/maxCols',\r\n\t\t'controllers/addField',\r\n\t\t'controllers/cellSortable',\r\n\t\t'controllers/gutterDroppable',\r\n\t\t'controllers/rowsSortable',\r\n\t\t'controllers/undo',\r\n\t\t'controllers/updateFieldOrder'\r\n\t], \r\n\tfunction\r\n\t(\r\n\t\tData,\r\n\t\tMaxCols,\r\n\t\tAddField,\r\n\t\tCellSortable,\r\n\t\tGutterDroppable,\r\n\t\tRowsSortable,\r\n\t\tUndo,\r\n\t\tUpdateFieldOrder\r\n\t)\r\n\t{\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnew MaxCols();\r\n\t\t\tnew Data();\r\n\t\t\tnew AddField();\r\n\t\t\tnew CellSortable();\r\n\t\t\tnew GutterDroppable();\r\n\t\t\tnew RowsSortable();\r\n\t\t\tnew Undo();\r\n\t\t\tnew UpdateFieldOrder();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","define( 'controllers/loadContent',['views/rowCollection', 'controllers/loadControllers', 'models/rowCollection'], function( RowCollectionView, LoadControllers, RowCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'after:loadControllers', this.loadControllers );\r\n\t\t},\r\n\r\n\t\tloadControllers: function() {\r\n\t\t\tnew LoadControllers();\r\n\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.getFormContentView, 4, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.formContentSave, 4, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.formContentLoad, 4, this );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * In the RC for Ninja Forms, the 'formContent' channel was called 'fieldContents'.\r\n\t\t\t * This was changed in version 3.0. These radio messages are here to make sure nothing breaks.\r\n\t\t\t *\r\n\t\t\t * TODO: Remove this backwards compatibility radio calls.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fieldContents' ).request( 'add:viewFilter', this.getFormContentView, 4, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).request( 'add:saveFilter', this.formContentSave, 4, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).request( 'add:loadFilter', this.formContentLoad, 4, this );\r\n\t\t},\r\n\r\n\t\tgetFormContentView: function( collection ) {\r\n\t\t\treturn RowCollectionView;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we update our database, set the form setting value of 'formContentData' to our row collection.\r\n\t\t * To do this, we have to break our row collection down into an object, then remove all the extra field settings\r\n\t\t * so that we're left with just the field IDs.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return array \r\n\t\t */\r\n\t\tformContentSave: function( rowCollection ) {\r\n\t\t\tvar rows = JSON.parse( JSON.stringify( rowCollection ) );\t\r\n\t\t\t_.each( rows, function( row, rowIndex ) {\r\n\t\t\t\t_.each( row.cells, function( cell, cellIndex ) {\r\n\t\t\t\t\t_.each( cell.fields, function( field, fieldIndex ) {\r\n\t\t\t\t\t\tif ( field.key ) {\r\n\t\t\t\t\t\t\trows[ rowIndex ].cells[ cellIndex].fields[ fieldIndex ] = field.key;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\treturn rows;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we load our builder view, we filter the formContentData.\r\n\t\t * This turns the saved object into a Backbone Collection.\r\n\t\t *\r\n\t\t * If we aren't passed any data, then this form hasn't been modified with layouts yet,\r\n\t\t * so we default to the nfLayouts.rows global variable that is localised for us.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  array \t\tformContentData \tcurrent value of our formContentData.\r\n\t\t * @param  bool  \t\tempty\t\t\t\tis this a purposefully empty collection?\r\n\t\t * @param  array\t\tfields\t\t\t\tfields array to be turned into rows. This is only passed if MP is also active.\r\n\t\t * @return Backbone.Collection\r\n\t\t */\r\n\t\tformContentLoad: function( formContentData, empty, fields ) {\r\n\t\t\tif ( true === formContentData instanceof RowCollection ) return formContentData;\r\n\t\t\t\r\n\t\t\tempty = empty || false;\r\n\t\t\tfields = fields || false;\r\n\t\t\tvar rowArray = [];\r\n\r\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\r\n\r\n\t\t\t/*\r\n\t\t\t * TODO: Bandaid fix for making sure that we interpret fields correclty when Multi-Part is active.\r\n\t\t\t * Basically, if MP is active, we don't want to ever use the nfLayouts.rows.\r\n\t\t\t */\r\n\t\t\tvar mpEnabled = ( 'undefined' != typeof formContentLoadFilters[1] ) ? true : false;\r\n\r\n\t\t\t/*\r\n\t\t\t * TODO: Bandaid fix for making sure that Layouts can interpret Multi-Part data if Multi-Part is disabled.\r\n\t\t\t */\r\n\t\t\tif ( ! mpEnabled && _.isArray( formContentData ) && 0 != _.isArray( formContentData ).length  && 'undefined' != typeof _.first( formContentData ) && 'part' == _.first( formContentData ).type ) {\r\n\t\t\t\t/* \r\n\t\t\t\t * Get our layout data from inside MP\r\n\t\t\t\t */\r\n\t\t\t\t\r\n\t\t\t\tformContentData = _.flatten( _.pluck( formContentData, 'formContentData' ) );\r\n\t\t\t\t_.each( formContentData, function( row, index ) {\r\n\t\t\t\t\trow.order = index + 1;\r\n\t\t\t\t}, this );\r\n\t\t\t}\r\n\r\n\t\t\tif ( _.isArray( formContentData ) && 0 != formContentData.length && 'undefined' == typeof formContentData[0].cells ) {\r\n\t\t\t\t_.each( formContentData, function( key, index ) {\r\n\t\t\t\t\trowArray.push( {\r\n\t\t\t\t\t\torder: index,\r\n\t\t\t\t\t\tcells: [ {\r\n\t\t\t\t\t\t\torder: 0,\r\n\t\t\t\t\t\t\tfields: [ key ],\r\n\t\t\t\t\t\t\twidth: '100'\r\n\t\t\t\t\t\t} ]\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} );\r\n\t\t\t} else if ( _.isEmpty( formContentData ) && 'undefined' != typeof nfLayouts && ! mpEnabled ) {\r\n\t\t\t\trowArray = nfLayouts.rows;\r\n\t\t\t} else {\r\n\t\t\t\trowArray = formContentData;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Ensure that our rows don't have any empty fields\r\n\t\t\t */\r\n\t\t\trowArray = _.filter( rowArray, function( row ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Check to see if any of our row's cells have a field.\r\n\t\t\t\t * If it does, return true and move on.\r\n\t\t\t\t */\r\n\t\t\t\treturn _.some( row.cells, function( cell ) { \r\n\t\t\t\t\treturn 1 <= cell.fields.length;\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\treturn new RowCollection( rowArray );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","var nfRadio = Backbone.Radio;\r\nrequire( ['controllers/loadContent'], function( LoadContent ) {\r\n\r\n\tvar NFLayouts = Marionette.Application.extend( {\r\n\r\n\t\tinitialize: function( options ) {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.afterNFLoad );\r\n\t\t},\r\n\r\n\t\tonStart: function() {\r\n\t\t\tnew LoadContent();\r\n\t\t},\r\n\r\n\t\tafterNFLoad: function( app ) {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).addClass( 'layouts' );\r\n\t\t}\r\n\t} );\r\n\r\n\tvar nfLayouts = new NFLayouts();\r\n\tnfLayouts.start();\r\n} );\ndefine(\"main\", function(){});\n\n"]}