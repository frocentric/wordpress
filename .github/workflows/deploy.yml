# This is the deployment workflow for the Frocentric WordPress application

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main, production ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      - name: Install dependencies
        uses: php-actions/composer@v5
        with:
          php_version: 7.4

      - name: Install phpcs
        run: vendor/bin/phpcs -i

      - name: PHP Code Style (phpcs)
        run: composer cs

  version:
    if: ${{ github.ref == 'refs/heads/production' && github.event_name == 'push' && !contains(github.event.head_commit.author.name, 'GitHub Action') }}
    needs: [ setup ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      executed: ${{ steps.step1.outputs.executed }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - id: step1
        run: echo '::set-output name=executed::true'

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15.x'

      # Bumps version, updates changelog and creates tag. Adds [skip ci] to commit message to prevent infinite workflow loop
      - name: Tag release
        run: |
          git fetch --unshallow --tags
          git config --global user.email "${{github.event.pusher.email}}"
          git config --global user.name "${{github.event.pusher.name}}"
          npx --yes standard-version
          message=`git log -1 --pretty=format:%B | cat`
          git commit --amend -m "$message
          [skip ci]"
          git tag -f $(git describe --tags $(git rev-list --tags --max-count=1))
          git push origin --tags --no-verify

  deploy:
    # Ensure execution for stage deployments, as dependent version job is skipped
    if: ${{ github.event_name == 'push' && !failure() && (success() || !needs.job1.outputs.executed) }}
    needs: [ setup, version ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Sets branch name as environment variable
      - uses: nelonoel/branch-name@v1.0.1

      # Enables branch-specific environment variables
      - uses: iamtheyammer/branch-env-vars@v1.0.2
        with:
          DESTINATION_REPO: |
            production:${{ secrets.DESTINATION_REPO_PROD }}
            main:${{ secrets.DESTINATION_REPO_STAGE }}

      # Syncs the repository with destination
      - name: Sync Repo
        uses: wei/git-sync@v3
        with:
          # GitHub repo slug or full clone url
          source_repo: "frocentric/wordpress"
          # Branch name to sync from
          source_branch: ${BRANCH_NAME}
          # GitHub repo slug or full clone url
          destination_repo: ${DESTINATION_REPO}
          # Branch name to sync to
          destination_branch: "main"
          # SSH key used to authenticate with git clone urls provided (optional if public or https clone url with authentication)
          destination_ssh_private_key: ${{ secrets.SSH_DESTINATION_PRIVATE_KEY }}
